!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){function n(e){"use strict";var t={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Specify a prefix to generated header ids",type:"string"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,description:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,description:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,description:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(t));var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r].defaultValue);return n}var r={},o={},i={},a=n(!0),s={github:{omitExtraWLInCodeBlocks:!0,prefixHeaderId:"user-content-",simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0},vanilla:n(!0)};function l(e,t){"use strict";var n=t?"Error in "+t+" extension->":"Error in unnamed extension",o={valid:!0,error:""};r.helper.isArray(e)||(e=[e]);for(var i=0;i<e.length;++i){var a=n+" sub-extension "+i+": ",s=e[i];if("object"!=typeof s)return o.valid=!1,o.error=a+"must be an object, but "+typeof s+" given",o;if(!r.helper.isString(s.type))return o.valid=!1,o.error=a+'property "type" must be a string, but '+typeof s.type+" given",o;var l=s.type=s.type.toLowerCase();if("language"===l&&(l=s.type="lang"),"html"===l&&(l=s.type="output"),"lang"!==l&&"output"!==l&&"listener"!==l)return o.valid=!1,o.error=a+"type "+l+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',o;if("listener"===l){if(r.helper.isUndefined(s.listeners))return o.valid=!1,o.error=a+'. Extensions of type "listener" must have a property called "listeners"',o}else if(r.helper.isUndefined(s.filter)&&r.helper.isUndefined(s.regex))return o.valid=!1,o.error=a+l+' extensions must define either a "regex" property or a "filter" method',o;if(s.listeners){if("object"!=typeof s.listeners)return o.valid=!1,o.error=a+'"listeners" property must be an object but '+typeof s.listeners+" given",o;for(var c in s.listeners)if(s.listeners.hasOwnProperty(c)&&"function"!=typeof s.listeners[c])return o.valid=!1,o.error=a+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+c+" must be a function but "+typeof s.listeners[c]+" given",o}if(s.filter){if("function"!=typeof s.filter)return o.valid=!1,o.error=a+'"filter" must be a function, but '+typeof s.filter+" given",o}else if(s.regex){if(r.helper.isString(s.regex)&&(s.regex=new RegExp(s.regex,"g")),!s.regex instanceof RegExp)return o.valid=!1,o.error=a+'"regex" property must either be a string or a RegExp object, but '+typeof s.regex+" given",o;if(r.helper.isUndefined(s.replace))return o.valid=!1,o.error=a+'"regex" extensions must implement a replace string or function',o}}return o}function c(e,t){"use strict";return"~E"+t.charCodeAt(0)+"E"}r.helper={},r.extensions={},r.setOption=function(e,t){"use strict";return a[e]=t,this},r.getOption=function(e){"use strict";return a[e]},r.getOptions=function(){"use strict";return a},r.resetOptions=function(){"use strict";a=n(!0)},r.setFlavor=function(e){"use strict";if(s.hasOwnProperty(e)){var t=s[e];for(var n in t)t.hasOwnProperty(n)&&(a[n]=t[n])}},r.getDefaultOptions=function(e){"use strict";return n(e)},r.subParser=function(e,t){"use strict";if(r.helper.isString(e)){if(void 0===t){if(o.hasOwnProperty(e))return o[e];throw Error("SubParser named "+e+" not registered!")}o[e]=t}},r.extension=function(e,t){"use strict";if(!r.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=r.helper.stdExtName(e),r.helper.isUndefined(t)){if(!i.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return i[e]}"function"==typeof t&&(t=t()),r.helper.isArray(t)||(t=[t]);var n=l(t,e);if(!n.valid)throw Error(n.error);i[e]=t},r.getAllExtensions=function(){"use strict";return i},r.removeExtension=function(e){"use strict";delete i[e]},r.resetExtensions=function(){"use strict";i={}},r.validateExtension=function(e){"use strict";var t=l(e,null);return!!t.valid||(console.warn(t.error),!1)},r.hasOwnProperty("helper")||(r.helper={}),r.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},r.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},r.helper.forEach=function(e,t){"use strict";if("function"==typeof e.forEach)e.forEach(t);else for(var n=0;n<e.length;n++)t(e[n],n,e)},r.helper.isArray=function(e){"use strict";return e.constructor===Array},r.helper.isUndefined=function(e){"use strict";return void 0===e},r.helper.stdExtName=function(e){"use strict";return e.replace(/[_-]||\s/g,"").toLowerCase()},r.helper.escapeCharactersCallback=c,r.helper.escapeCharacters=function(e,t,n){"use strict";var r="(["+t.replace(/([\[\]\\])/g,"\\$1")+"])";n&&(r="\\\\"+r);var o=new RegExp(r,"g");return e=e.replace(o,c)};var u=function(e,t,n,r){"use strict";var o,i,a,s,l,c=r||"",u=c.indexOf("g")>-1,p=new RegExp(t+"|"+n,"g"+c.replace(/g/g,"")),f=new RegExp(t,c.replace(/g/g,"")),d=[];do{for(o=0;a=p.exec(e);)if(f.test(a[0]))o++||(s=(i=p.lastIndex)-a[0].length);else if(o&&!--o){l=a.index+a[0].length;var h={left:{start:s,end:i},match:{start:i,end:a.index},right:{start:a.index,end:l},wholeMatch:{start:s,end:l}};if(d.push(h),!u)return d}}while(o&&(p.lastIndex=i));return d};r.helper.matchRecursiveRegExp=function(e,t,n,r){"use strict";for(var o=u(e,t,n,r),i=[],a=0;a<o.length;++a)i.push([e.slice(o[a].wholeMatch.start,o[a].wholeMatch.end),e.slice(o[a].match.start,o[a].match.end),e.slice(o[a].left.start,o[a].left.end),e.slice(o[a].right.start,o[a].right.end)]);return i},r.helper.replaceRecursiveRegExp=function(e,t,n,o,i){"use strict";if(!r.helper.isFunction(t)){var a=t;t=function(){return a}}var s=u(e,n,o,i),l=e,c=s.length;if(c>0){var p=[];0!==s[0].wholeMatch.start&&p.push(e.slice(0,s[0].wholeMatch.start));for(var f=0;f<c;++f)p.push(t(e.slice(s[f].wholeMatch.start,s[f].wholeMatch.end),e.slice(s[f].match.start,s[f].match.end),e.slice(s[f].left.start,s[f].left.end),e.slice(s[f].right.start,s[f].right.end))),f<c-1&&p.push(e.slice(s[f].wholeMatch.end,s[f+1].wholeMatch.start));s[c-1].wholeMatch.end<e.length&&p.push(e.slice(s[c-1].wholeMatch.end)),l=p.join("")}return l},r.helper.isUndefined(console)&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),r.Converter=function(e){"use strict";var t={},n=[],o=[],c={};function u(e,t){if(t=t||null,r.helper.isString(e)){if(t=e=r.helper.stdExtName(e),r.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,t){"function"==typeof e&&(e=e(new r.Converter));r.helper.isArray(e)||(e=[e]);var i=l(e,t);if(!i.valid)throw Error(i.error);for(var a=0;a<e.length;++a)switch(e[a].type){case"lang":n.push(e[a]);break;case"output":o.push(e[a]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(r.extensions[e],e);if(r.helper.isUndefined(i[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=i[e]}"function"==typeof e&&(e=e()),r.helper.isArray(e)||(e=[e]);var a=l(e,t);if(!a.valid)throw Error(a.error);for(var s=0;s<e.length;++s){switch(e[s].type){case"lang":n.push(e[s]);break;case"output":o.push(e[s])}if(e[s].hasOwnProperty(c))for(var u in e[s].listeners)e[s].listeners.hasOwnProperty(u)&&p(u,e[s].listeners[u])}}function p(e,t){if(!r.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof t)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof t+" given");c.hasOwnProperty(e)||(c[e]=[]),c[e].push(t)}!function(){for(var n in e=e||{},a)a.hasOwnProperty(n)&&(t[n]=a[n]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.extensions&&r.helper.forEach(t.extensions,u)}(),this._dispatch=function(e,t,n,r){if(c.hasOwnProperty(e))for(var o=0;o<c[e].length;++o){var i=c[e][o](e,t,this,n,r);i&&void 0!==i&&(t=i)}return t},this.listen=function(e,t){return p(e,t),this},this.makeHtml=function(e){if(!e)return e;var i={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:n,outputModifiers:o,converter:this,ghCodeBlocks:[]};return e=(e=(e=(e=e.replace(/~/g,"~T")).replace(/\$/g,"~D")).replace(/\r\n/g,"\n")).replace(/\r/g,"\n"),t.smartIndentationFix&&(e=function(e){var t=e.match(/^\s*/)[0].length,n=new RegExp("^\\s{0,"+t+"}","gm");return e.replace(n,"")}(e)),e="\n\n"+e+"\n\n",e=r.subParser("detab")(e,t,i),e=r.subParser("stripBlankLines")(e,t,i),r.helper.forEach(n,function(n){e=r.subParser("runExtension")(n,e,t,i)}),e=r.subParser("hashPreCodeTags")(e,t,i),e=r.subParser("githubCodeBlocks")(e,t,i),e=r.subParser("hashHTMLBlocks")(e,t,i),e=r.subParser("hashHTMLSpans")(e,t,i),e=r.subParser("stripLinkDefinitions")(e,t,i),e=r.subParser("blockGamut")(e,t,i),e=r.subParser("unhashHTMLSpans")(e,t,i),e=(e=(e=r.subParser("unescapeSpecialChars")(e,t,i)).replace(/~D/g,"$$")).replace(/~T/g,"~"),r.helper.forEach(o,function(n){e=r.subParser("runExtension")(n,e,t,i)}),e},this.setOption=function(e,n){t[e]=n},this.getOption=function(e){return t[e]},this.getOptions=function(){return t},this.addExtension=function(e,t){u(e,t=t||null)},this.useExtension=function(e){u(e)},this.setFlavor=function(e){if(s.hasOwnProperty(e)){var n=s[e];for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])}},this.removeExtension=function(e){r.helper.isArray(e)||(e=[e]);for(var t=0;t<e.length;++t){for(var i=e[t],a=0;a<n.length;++a)n[a]===i&&n[a].splice(a,1);for(;0<o.length;++a)o[0]===i&&o[0].splice(a,1)}},this.getAllExtensions=function(){return{language:n,output:o}}},r.subParser("anchors",function(e,t,n){"use strict";var o=function(e,t,o,i,a,s,l,c){r.helper.isUndefined(c)&&(c=""),e=t;var u=o,p=i.toLowerCase(),f=a,d=c;if(!f)if(p||(p=u.toLowerCase().replace(/ ?\n/g," ")),f="#"+p,r.helper.isUndefined(n.gUrls[p])){if(!(e.search(/\(\s*\)$/m)>-1))return e;f=""}else f=n.gUrls[p],r.helper.isUndefined(n.gTitles[p])||(d=n.gTitles[p]);var h='<a href="'+(f=r.helper.escapeCharacters(f,"*_",!1))+'"';return""!==d&&null!==d&&(d=d.replace(/"/g,"&quot;"),h+=' title="'+(d=r.helper.escapeCharacters(d,"*_",!1))+'"'),h+=">"+u+"</a>"};return e=(e=(e=(e=n.converter._dispatch("anchors.before",e,t,n)).replace(/(\[((?:\[[^\]]*]|[^\[\]])*)][ ]?(?:\n[ ]*)?\[(.*?)])()()()()/g,o)).replace(/(\[((?:\[[^\]]*]|[^\[\]])*)]\([ \t]*()<?(.*?(?:\(.*?\).*?)?)>?[ \t]*((['"])(.*?)\6[ \t]*)?\))/g,o)).replace(/(\[([^\[\]]+)])()()()()()/g,o),e=n.converter._dispatch("anchors.after",e,t,n)}),r.subParser("autoLinks",function(e,t,n){"use strict";function o(e,n,r,o,i){var a=n,s="";return/^www\./i.test(n)&&(n=n.replace(/^www\./i,"http://www.")),t.excludeTrailingPunctuationFromURLs&&i&&(s=i),'<a href="'+n+'">'+a+"</a>"+s}function i(e,t){var n=r.subParser("unescapeSpecialChars")(t);return r.subParser("encodeEmailAddress")(n)}return e=(e=(e=n.converter._dispatch("autoLinks.before",e,t,n)).replace(/<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)>/gi,o)).replace(/<(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,i),t.simplifiedAutoLink&&(e=(e=t.excludeTrailingPunctuationFromURLs?e.replace(/\b(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?()]?)(?=\s|$)(?!["<>])/gi,o):e.replace(/\b(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+)()(?=\s|$)(?!["<>])/gi,o)).replace(/(?:^|\s)([A-Za-z0-9!#$%&'*+-\/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?:$|\s)/gi,i)),e=n.converter._dispatch("autoLinks.after",e,t,n)}),r.subParser("blockGamut",function(e,t,n){"use strict";e=n.converter._dispatch("blockGamut.before",e,t,n),e=r.subParser("blockQuotes")(e,t,n),e=r.subParser("headers")(e,t,n);var o=r.subParser("hashBlock")("<hr />",t,n);return e=(e=(e=e.replace(/^[ ]{0,2}([ ]?\*[ ]?){3,}[ \t]*$/gm,o)).replace(/^[ ]{0,2}([ ]?\-[ ]?){3,}[ \t]*$/gm,o)).replace(/^[ ]{0,2}([ ]?_[ ]?){3,}[ \t]*$/gm,o),e=r.subParser("lists")(e,t,n),e=r.subParser("codeBlocks")(e,t,n),e=r.subParser("tables")(e,t,n),e=r.subParser("hashHTMLBlocks")(e,t,n),e=r.subParser("paragraphs")(e,t,n),e=n.converter._dispatch("blockGamut.after",e,t,n)}),r.subParser("blockQuotes",function(e,t,n){"use strict";return e=(e=n.converter._dispatch("blockQuotes.before",e,t,n)).replace(/((^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+)/gm,function(e,o){var i=o;return i=(i=(i=i.replace(/^[ \t]*>[ \t]?/gm,"~0")).replace(/~0/g,"")).replace(/^[ \t]+$/gm,""),i=r.subParser("githubCodeBlocks")(i,t,n),i=(i=(i=r.subParser("blockGamut")(i,t,n)).replace(/(^|\n)/g,"$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(e,t){var n=t;return n=(n=n.replace(/^  /gm,"~0")).replace(/~0/g,"")}),r.subParser("hashBlock")("<blockquote>\n"+i+"\n</blockquote>",t,n)}),e=n.converter._dispatch("blockQuotes.after",e,t,n)}),r.subParser("codeBlocks",function(e,t,n){"use strict";e=n.converter._dispatch("codeBlocks.before",e,t,n);return e=(e=(e+="~0").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=~0))/g,function(e,o,i){var a=o,s=i,l="\n";return a=r.subParser("outdent")(a),a=r.subParser("encodeCode")(a),a=(a=(a=r.subParser("detab")(a)).replace(/^\n+/g,"")).replace(/\n+$/g,""),t.omitExtraWLInCodeBlocks&&(l=""),a="<pre><code>"+a+l+"</code></pre>",r.subParser("hashBlock")(a,t,n)+s})).replace(/~0/,""),e=n.converter._dispatch("codeBlocks.after",e,t,n)}),r.subParser("codeSpans",function(e,t,n){"use strict";return void 0===(e=n.converter._dispatch("codeSpans.before",e,t,n))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(e,t,n,o){var i=o;return i=(i=i.replace(/^([ \t]*)/g,"")).replace(/[ \t]*$/g,""),t+"<code>"+(i=r.subParser("encodeCode")(i))+"</code>"}),e=n.converter._dispatch("codeSpans.after",e,t,n)}),r.subParser("detab",function(e){"use strict";return e=(e=(e=(e=(e=e.replace(/\t(?=\t)/g,"    ")).replace(/\t/g,"~A~B")).replace(/~B(.+?)~A/g,function(e,t){for(var n=t,r=4-n.length%4,o=0;o<r;o++)n+=" ";return n})).replace(/~A/g,"    ")).replace(/~B/g,"")}),r.subParser("encodeAmpsAndAngles",function(e){"use strict";return e=(e=e.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;")).replace(/<(?![a-z\/?\$!])/gi,"&lt;")}),r.subParser("encodeBackslashEscapes",function(e){"use strict";return e=(e=e.replace(/\\(\\)/g,r.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+-.!])/g,r.helper.escapeCharactersCallback)}),r.subParser("encodeCode",function(e){"use strict";return e=(e=(e=e.replace(/&/g,"&amp;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;"),e=r.helper.escapeCharacters(e,"*_{}[]\\",!1)}),r.subParser("encodeEmailAddress",function(e){"use strict";var t=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e=(e='<a href="'+(e=(e="mailto:"+e).replace(/./g,function(e){if("@"===e)e=t[Math.floor(2*Math.random())](e);else if(":"!==e){var n=Math.random();e=n>.9?t[2](e):n>.45?t[1](e):t[0](e)}return e}))+'">'+e+"</a>").replace(/">.+:/g,'">')}),r.subParser("escapeSpecialCharsWithinTagAttributes",function(e){"use strict";return e=e.replace(/(<[a-z\/!$]("[^"]*"|'[^']*'|[^'">])*>|<!(--.*?--\s*)+>)/gi,function(e){var t=e.replace(/(.)<\/?code>(?=.)/g,"$1`");return t=r.helper.escapeCharacters(t,"\\`*_",!1)})}),r.subParser("githubCodeBlocks",function(e,t,n){"use strict";return t.ghCodeBlocks?(e=n.converter._dispatch("githubCodeBlocks.before",e,t,n),e=(e=(e+="~0").replace(/(?:^|\n)```(.*)\n([\s\S]*?)\n```/g,function(e,o,i){var a=t.omitExtraWLInCodeBlocks?"":"\n";return i=r.subParser("encodeCode")(i),i="<pre><code"+(o?' class="'+o+" language-"+o+'"':"")+">"+(i=(i=(i=r.subParser("detab")(i)).replace(/^\n+/g,"")).replace(/\n+$/g,""))+a+"</code></pre>",i=r.subParser("hashBlock")(i,t,n),"\n\n~G"+(n.ghCodeBlocks.push({text:e,codeblock:i})-1)+"G\n\n"})).replace(/~0/,""),n.converter._dispatch("githubCodeBlocks.after",e,t,n)):e}),r.subParser("hashBlock",function(e,t,n){"use strict";return e=e.replace(/(^\n+|\n+$)/g,""),"\n\n~K"+(n.gHtmlBlocks.push(e)-1)+"K\n\n"}),r.subParser("hashElement",function(e,t,n){"use strict";return function(e,t){var r=t;return r=(r=(r=r.replace(/\n\n/g,"\n")).replace(/^\n/,"")).replace(/\n+$/g,""),r="\n\n~K"+(n.gHtmlBlocks.push(r)-1)+"K\n\n"}}),r.subParser("hashHTMLBlocks",function(e,t,n){"use strict";for(var o=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],i=function(e,t,r,o){var i=e;return-1!==r.search(/\bmarkdown\b/)&&(i=r+n.converter.makeHtml(t)+o),"\n\n~K"+(n.gHtmlBlocks.push(i)-1)+"K\n\n"},a=0;a<o.length;++a)e=r.helper.replaceRecursiveRegExp(e,i,"^ {0,3}<"+o[a]+"\\b[^>]*>","</"+o[a]+">","gim");return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,r.subParser("hashElement")(e,t,n)),e=(e=r.helper.replaceRecursiveRegExp(e,function(e){return"\n\n~K"+(n.gHtmlBlocks.push(e)-1)+"K\n\n"},"^ {0,3}\x3c!--","--\x3e","gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,r.subParser("hashElement")(e,t,n))}),r.subParser("hashHTMLSpans",function(e,t,n){"use strict";for(var o=r.helper.matchRecursiveRegExp(e,"<code\\b[^>]*>","</code>","gi"),i=0;i<o.length;++i)e=e.replace(o[i][0],"~L"+(n.gHtmlSpans.push(o[i][0])-1)+"L");return e}),r.subParser("unhashHTMLSpans",function(e,t,n){"use strict";for(var r=0;r<n.gHtmlSpans.length;++r)e=e.replace("~L"+r+"L",n.gHtmlSpans[r]);return e}),r.subParser("hashPreCodeTags",function(e,t,n){"use strict";return e=r.helper.replaceRecursiveRegExp(e,function(e,t,o,i){var a=o+r.subParser("encodeCode")(t)+i;return"\n\n~G"+(n.ghCodeBlocks.push({text:e,codeblock:a})-1)+"G\n\n"},"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim")}),r.subParser("headers",function(e,t,n){"use strict";e=n.converter._dispatch("headers.before",e,t,n);var o=t.prefixHeaderId,i=isNaN(parseInt(t.headerLevelStart))?1:parseInt(t.headerLevelStart),a=t.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,s=t.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;function l(e){var t,i=e.replace(/[^\w]/g,"").toLowerCase();return n.hashLinkCounts[i]?t=i+"-"+n.hashLinkCounts[i]++:(t=i,n.hashLinkCounts[i]=1),!0===o&&(o="section"),r.helper.isString(o)?o+t:t}return e=(e=(e=e.replace(a,function(e,o){var a=r.subParser("spanGamut")(o,t,n),s=t.noHeaderId?"":' id="'+l(o)+'"',c="<h"+i+s+">"+a+"</h"+i+">";return r.subParser("hashBlock")(c,t,n)})).replace(s,function(e,o){var a=r.subParser("spanGamut")(o,t,n),s=t.noHeaderId?"":' id="'+l(o)+'"',c=i+1,u="<h"+c+s+">"+a+"</h"+c+">";return r.subParser("hashBlock")(u,t,n)})).replace(/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm,function(e,o,a){var s=r.subParser("spanGamut")(a,t,n),c=t.noHeaderId?"":' id="'+l(a)+'"',u=i-1+o.length,p="<h"+u+c+">"+s+"</h"+u+">";return r.subParser("hashBlock")(p,t,n)}),e=n.converter._dispatch("headers.after",e,t,n)}),r.subParser("images",function(e,t,n){"use strict";function o(e,t,o,i,a,s,l,c){var u=n.gUrls,p=n.gTitles,f=n.gDimensions;if(o=o.toLowerCase(),c||(c=""),""===i||null===i){if(""!==o&&null!==o||(o=t.toLowerCase().replace(/ ?\n/g," ")),i="#"+o,r.helper.isUndefined(u[o]))return e;i=u[o],r.helper.isUndefined(p[o])||(c=p[o]),r.helper.isUndefined(f[o])||(a=f[o].width,s=f[o].height)}t=t.replace(/"/g,"&quot;"),t=r.helper.escapeCharacters(t,"*_",!1);var d='<img src="'+(i=r.helper.escapeCharacters(i,"*_",!1))+'" alt="'+t+'"';return c&&(c=c.replace(/"/g,"&quot;"),d+=' title="'+(c=r.helper.escapeCharacters(c,"*_",!1))+'"'),a&&s&&(d+=' width="'+(a="*"===a?"auto":a)+'"',d+=' height="'+(s="*"===s?"auto":s)+'"'),d+=" />"}return e=(e=(e=n.converter._dispatch("images.before",e,t,n)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[(.*?)]()()()()()/g,o)).replace(/!\[(.*?)]\s?\([ \t]*()<?(\S+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(['"])(.*?)\6[ \t]*)?\)/g,o),e=n.converter._dispatch("images.after",e,t,n)}),r.subParser("italicsAndBold",function(e,t,n){"use strict";return e=n.converter._dispatch("italicsAndBold.before",e,t,n),e=t.literalMidWordUnderscores?(e=(e=(e=e.replace(/(^|\s|>|\b)__(?=\S)([\s\S]+?)__(?=\b|<|\s|$)/gm,"$1<strong>$2</strong>")).replace(/(^|\s|>|\b)_(?=\S)([\s\S]+?)_(?=\b|<|\s|$)/gm,"$1<em>$2</em>")).replace(/(\*\*)(?=\S)([^\r]*?\S[*]*)\1/g,"<strong>$2</strong>")).replace(/(\*)(?=\S)([^\r]*?\S)\1/g,"<em>$2</em>"):(e=e.replace(/(\*\*|__)(?=\S)([^\r]*?\S[*_]*)\1/g,"<strong>$2</strong>")).replace(/(\*|_)(?=\S)([^\r]*?\S)\1/g,"<em>$2</em>"),e=n.converter._dispatch("italicsAndBold.after",e,t,n)}),r.subParser("lists",function(e,t,n){"use strict";function o(e,o){n.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var i=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(~0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,a=/\n[ \t]*\n(?!~0)/.test(e+="~0");return t.disableForced4SpacesIndentedSublists&&(i=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(~0|\2([*+-]|\d+[.])[ \t]+))/gm),e=(e=e.replace(i,function(e,o,i,s,l,c,u){u=u&&""!==u.trim();var p=r.subParser("outdent")(l,t,n),f="";return c&&t.tasklists&&(f=' class="task-list-item" style="list-style-type: none;"',p=p.replace(/^[ \t]*\[(x|X| )?]/m,function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return u&&(e+=" checked"),e+=">"})),o||p.search(/\n{2,}/)>-1?(p=r.subParser("githubCodeBlocks")(p,t,n),p=r.subParser("blockGamut")(p,t,n)):(p=(p=r.subParser("lists")(p,t,n)).replace(/\n$/,""),p=a?r.subParser("paragraphs")(p,t,n):r.subParser("spanGamut")(p,t,n)),p="<li"+f+">"+p+"</li>\n"})).replace(/~0/g,""),n.gListLevel--,o&&(e=e.replace(/\s+$/,"")),e}function i(e,n,r){var i=t.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,a=t.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,s="ul"===n?i:a,l="";return-1!==e.search(s)?function e(t){var c=t.search(s);-1!==c?(l+="\n<"+n+">\n"+o(t.slice(0,c),!!r)+"</"+n+">\n",s="ul"===(n="ul"===n?"ol":"ul")?i:a,e(t.slice(c))):l+="\n<"+n+">\n"+o(t,!!r)+"</"+n+">\n"}(e):l="\n<"+n+">\n"+o(e,!!r)+"</"+n+">\n",l}return e=n.converter._dispatch("lists.before",e,t,n),e+="~0",e=(e=n.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,t,n){return i(t,n.search(/[*+-]/g)>-1?"ul":"ol",!0)}):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(~0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,t,n,r){return i(n,r.search(/[*+-]/g)>-1?"ul":"ol",!1)})).replace(/~0/,""),e=n.converter._dispatch("lists.after",e,t,n)}),r.subParser("outdent",function(e){"use strict";return e=(e=e.replace(/^(\t|[ ]{1,4})/gm,"~0")).replace(/~0/g,"")}),r.subParser("paragraphs",function(e,t,n){"use strict";for(var o=(e=(e=(e=n.converter._dispatch("paragraphs.before",e,t,n)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),i=[],a=o.length,s=0;s<a;s++){var l=o[s];l.search(/~(K|G)(\d+)\1/g)>=0?i.push(l):(l=(l=r.subParser("spanGamut")(l,t,n)).replace(/^([ \t]*)/g,"<p>"),l+="</p>",i.push(l))}for(a=i.length,s=0;s<a;s++){for(var c="",u=i[s],p=!1;u.search(/~(K|G)(\d+)\1/)>=0;){var f=RegExp.$1,d=RegExp.$2;c=(c="K"===f?n.gHtmlBlocks[d]:p?r.subParser("encodeCode")(n.ghCodeBlocks[d].text):n.ghCodeBlocks[d].codeblock).replace(/\$/g,"$$$$"),u=u.replace(/(\n\n)?~(K|G)\d+\2(\n\n)?/,c),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(u)&&(p=!0)}i[s]=u}return e=(e=(e=i.join("\n")).replace(/^\n+/g,"")).replace(/\n+$/g,""),n.converter._dispatch("paragraphs.after",e,t,n)}),r.subParser("runExtension",function(e,t,n,r){"use strict";if(e.filter)t=e.filter(t,r.converter,n);else if(e.regex){var o=e.regex;!o instanceof RegExp&&(o=new RegExp(o,"g")),t=t.replace(o,e.replace)}return t}),r.subParser("spanGamut",function(e,t,n){"use strict";return e=n.converter._dispatch("spanGamut.before",e,t,n),e=r.subParser("codeSpans")(e,t,n),e=r.subParser("escapeSpecialCharsWithinTagAttributes")(e,t,n),e=r.subParser("encodeBackslashEscapes")(e,t,n),e=r.subParser("images")(e,t,n),e=r.subParser("anchors")(e,t,n),e=r.subParser("autoLinks")(e,t,n),e=r.subParser("encodeAmpsAndAngles")(e,t,n),e=r.subParser("italicsAndBold")(e,t,n),e=r.subParser("strikethrough")(e,t,n),e=t.simpleLineBreaks?e.replace(/\n/g,"<br />\n"):e.replace(/  +\n/g,"<br />\n"),e=n.converter._dispatch("spanGamut.after",e,t,n)}),r.subParser("strikethrough",function(e,t,n){"use strict";return t.strikethrough&&(e=(e=n.converter._dispatch("strikethrough.before",e,t,n)).replace(/(?:~T){2}([\s\S]+?)(?:~T){2}/g,"<del>$1</del>"),e=n.converter._dispatch("strikethrough.after",e,t,n)),e}),r.subParser("stripBlankLines",function(e){"use strict";return e.replace(/^[ \t]+$/gm,"")}),r.subParser("stripLinkDefinitions",function(e,t,n){"use strict";return e=(e=(e+="~0").replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(\S+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=~0))/gm,function(e,o,i,a,s,l,c){return o=o.toLowerCase(),n.gUrls[o]=r.subParser("encodeAmpsAndAngles")(i),l?l+c:(c&&(n.gTitles[o]=c.replace(/"|'/g,"&quot;")),t.parseImgDimensions&&a&&s&&(n.gDimensions[o]={width:a,height:s}),"")})).replace(/~0/,"")}),r.subParser("tables",function(e,t,n){"use strict";if(!t.tables)return e;function o(e,o){return"<td"+o+">"+r.subParser("spanGamut")(e,t,n)+"</td>\n"}return e=(e=n.converter._dispatch("tables.before",e,t,n)).replace(/^ {0,3}\|?.+\|.+\n[ \t]{0,3}\|?[ \t]*:?[ \t]*(?:-|=){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:-|=){2,}[\s\S]+?(?:\n\n|~0)/gm,function(e){var i,a=e.split("\n");for(i=0;i<a.length;++i)/^ {0,3}\|/.test(a[i])&&(a[i]=a[i].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(a[i])&&(a[i]=a[i].replace(/\|[ \t]*$/,""));var s,l,c,u,p=a[0].split("|").map(function(e){return e.trim()}),f=a[1].split("|").map(function(e){return e.trim()}),d=[],h=[],g=[],m=[];for(a.shift(),a.shift(),i=0;i<a.length;++i)""!==a[i].trim()&&d.push(a[i].split("|").map(function(e){return e.trim()}));if(p.length<f.length)return e;for(i=0;i<f.length;++i)g.push((s=f[i],/^:[ \t]*--*$/.test(s)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(s)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(s)?' style="text-align:center;"':""));for(i=0;i<p.length;++i)r.helper.isUndefined(g[i])&&(g[i]=""),h.push((l=p[i],c=g[i],u=void 0,u="",l=l.trim(),t.tableHeaderId&&(u=' id="'+l.replace(/ /g,"_").toLowerCase()+'"'),"<th"+u+c+">"+(l=r.subParser("spanGamut")(l,t,n))+"</th>\n"));for(i=0;i<d.length;++i){for(var v=[],y=0;y<h.length;++y)r.helper.isUndefined(d[i][y]),v.push(o(d[i][y],g[y]));m.push(v)}return function(e,t){for(var n="<table>\n<thead>\n<tr>\n",r=e.length,o=0;o<r;++o)n+=e[o];for(n+="</tr>\n</thead>\n<tbody>\n",o=0;o<t.length;++o){n+="<tr>\n";for(var i=0;i<r;++i)n+=t[o][i];n+="</tr>\n"}return n+="</tbody>\n</table>\n"}(h,m)}),e=n.converter._dispatch("tables.after",e,t,n)}),r.subParser("unescapeSpecialChars",function(e){"use strict";return e=e.replace(/~E(\d+)E/g,function(e,t){var n=parseInt(t);return String.fromCharCode(n)})});e.exports=r},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],a=n.document,s=Object.getPrototypeOf,l=i.slice,c=i.concat,u=i.push,p=i.indexOf,f={},d=f.toString,h=f.hasOwnProperty,g=h.toString,m=g.call(Object),v={};function y(e,t){var n=(t=t||a).createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}var b=function(e,t){return new b.fn.init(e,t)},x=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,w=/^-ms-/,k=/-([a-z])/g,T=function(e,t){return t.toUpperCase()};function C(e){var t=!!e&&"length"in e&&e.length,n=b.type(e);return"function"!==n&&!b.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}b.fn=b.prototype={jquery:"3.1.1",constructor:b,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=b.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return b.each(this,e)},map:function(e){return this.pushStack(b.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:i.sort,splice:i.splice},b.extend=b.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||b.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(c&&r&&(b.isPlainObject(r)||(o=b.isArray(r)))?(o?(o=!1,i=n&&b.isArray(n)?n:[]):i=n&&b.isPlainObject(n)?n:{},a[t]=b.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},b.extend({expando:"jQuery"+("3.1.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===b.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=b.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=s(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&g.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e},globalEval:function(e){y(e)},camelCase:function(e){return e.replace(w,"ms-").replace(k,T)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(x,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?b.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:p.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return c.apply([],a)},guid:1,proxy:function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),b.isFunction(e))return r=l.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(l.call(arguments)))}).guid=e.guid=e.guid||b.guid++,o},now:Date.now,support:v}),"function"==typeof Symbol&&(b.fn[Symbol.iterator]=i[Symbol.iterator]),b.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){f["[object "+t+"]"]=t.toLowerCase()});var E=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,r,o,i,a,s,l,c,u,p,f,d,h,g,m,v,y,b,x="sizzle"+1*new Date,w=e.document,k=0,T=0,C=ae(),E=ae(),S=ae(),L=function(e,t){return e===t&&(p=!0),0},j={}.hasOwnProperty,A=[],P=A.pop,N=A.push,D=A.push,F=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",q="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+M+"*("+q+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+M+"*\\]",B=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",_=new RegExp(M+"+","g"),I=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),$=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),W=new RegExp(B),G=new RegExp("^"+q+"$"),V={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){f()},oe=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{D.apply(A=F.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){D={apply:A.length?function(e,t){N.apply(e,F.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ie(e,t,r,o){var i,s,c,u,p,h,v,y=t&&t.ownerDocument,k=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return r;if(!o&&((t?t.ownerDocument||t:w)!==d&&f(t),t=t||d,g)){if(11!==k&&(p=Q.exec(e)))if(i=p[1]){if(9===k){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(y&&(c=y.getElementById(i))&&b(t,c)&&c.id===i)return r.push(c),r}else{if(p[2])return D.apply(r,t.getElementsByTagName(e)),r;if((i=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!S[e+" "]&&(!m||!m.test(e))){if(1!==k)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((u=t.getAttribute("id"))?u=u.replace(te,ne):t.setAttribute("id",u=x),s=(h=a(e)).length;s--;)h[s]="#"+u+" "+ve(h[s]);v=h.join(","),y=J.test(e)&&ge(t.parentNode)||t}if(v)try{return D.apply(r,y.querySelectorAll(v)),r}catch(e){}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(I,"$1"),t,r,o)}function ae(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[x]=!0,e}function le(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function ue(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ie.support={},i=ie.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},f=ie.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,g=!i(d),w!==d&&(o=d.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",re,!1):o.attachEvent&&o.attachEvent("onunload",re)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(d.getElementsByClassName),n.getById=le(function(e){return h.appendChild(e).id=x,!d.getElementsByName||!d.getElementsByName(x).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],m=[],(n.qsa=K.test(d.querySelectorAll))&&(le(function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=K.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",B)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(h.compareDocumentPosition),b=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return p=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&b(w,e)?-1:t===d||t.ownerDocument===w&&b(w,t)?1:u?O(u,e)-O(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e===d?-1:t===d?1:o?-1:i?1:u?O(u,e)-O(u,t):0;if(o===i)return ue(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ue(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},ie.matches=function(e,t){return ie(e,null,null,t)},ie.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&f(e),t=t.replace(U,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return ie(t,d,null,[e]).length>0},ie.contains=function(e,t){return(e.ownerDocument||e)!==d&&f(e),b(e,t)},ie.attr=function(e,t){(e.ownerDocument||e)!==d&&f(e);var o=r.attrHandle[t.toLowerCase()],i=o&&j.call(r.attrHandle,t.toLowerCase())?o(e,t,!g):void 0;return void 0!==i?i:n.attributes||!g?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ie.escape=function(e){return(e+"").replace(te,ne)},ie.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ie.uniqueSort=function(e){var t,r=[],o=0,i=0;if(p=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(L),p){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return u=null,e},o=ie.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=ie.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ie.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ie.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var o=ie.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(_," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,p,f,d,h,g=i!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(i){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(b=(d=(c=(u=(p=(f=m)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],f=d&&m.childNodes[d];f=++d&&f&&f[g]||(b=d=0)||h.pop();)if(1===f.nodeType&&++b&&f===t){u[e]=[k,d,b];break}}else if(y&&(b=d=(c=(u=(p=(f=t)[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(f=++d&&f&&f[g]||(b=d=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((u=(p=f[x]||(f[x]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]=[k,b]),f!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ie.error("unsupported pseudo: "+e);return o[x]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=O(e,i[a])]=!(n[r]=i[a])}):function(e){return o(e,0,n)}):o}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(I,"$1"));return r[x]?se(function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return ie(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:se(function(e){return G.test(e||"")||ie.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=fe(t);function me(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ye(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,s=T++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,u,p,f=[k,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(u=(p=t[x]||(t[x]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[i])&&c[0]===k&&c[1]===s)return f[2]=c[2];if(u[i]=f,f[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function we(e,t,n,r,o,i){return r&&!r[x]&&(r=we(r)),o&&!o[x]&&(o=we(o,i)),se(function(i,a,s,l){var c,u,p,f=[],d=[],h=a.length,g=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)ie(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!i&&t?g:xe(g,f,e,s,l),v=n?o||(i?e:h||r)?[]:a:m;if(n&&n(m,v,s,l),r)for(c=xe(v,d),r(c,[],s,l),u=c.length;u--;)(p=c[u])&&(v[d[u]]=!(m[d[u]]=p));if(i){if(o||e){if(o){for(c=[],u=v.length;u--;)(p=v[u])&&c.push(m[u]=p);o(null,v=[],c,l)}for(u=v.length;u--;)(p=v[u])&&(c=o?O(i,p):f[u])>-1&&(i[c]=!(a[c]=p))}}else v=xe(v===a?v.splice(h,v.length):v),o?o(null,a,v,l):D.apply(a,v)})}function ke(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,u=ye(function(e){return e===t},s,!0),p=ye(function(e){return O(t,e)>-1},s,!0),f=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?u(e,n,r):p(e,n,r));return t=null,o}];l<i;l++)if(n=r.relative[e[l].type])f=[ye(be(f),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(o=++l;o<i&&!r.relative[e[o].type];o++);return we(l>1&&be(f),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(I,"$1"),n,l<o&&ke(e.slice(l,o)),o<i&&ke(e=e.slice(o)),o<i&&ve(e))}f.push(n)}return be(f)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=ie.tokenize=function(e,t){var n,o,i,a,s,l,c,u=E[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=r.preFilter;s;){for(a in n&&!(o=$.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),n=!1,(o=z.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace(I," ")}),s=s.slice(n.length)),r.filter)!(o=V[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?ie.error(e):E(e,l).slice(0)},s=ie.compile=function(e,t){var n,o=[],i=[],s=S[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[x]?o.push(s):i.push(s);(s=S(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,s,l,u){var p,h,m,v=0,y="0",b=i&&[],x=[],w=c,T=i||o&&r.find.TAG("*",u),C=k+=null==w?1:Math.random()||.1,E=T.length;for(u&&(c=a===d||a||u);y!==E&&null!=(p=T[y]);y++){if(o&&p){for(h=0,a||p.ownerDocument===d||(f(p),s=!g);m=e[h++];)if(m(p,a||d,s)){l.push(p);break}u&&(k=C)}n&&((p=!m&&p)&&v--,i&&b.push(p))}if(v+=y,n&&y!==v){for(h=0;m=t[h++];)m(b,x,a,s);if(i){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=P.call(l));x=xe(x)}D.apply(l,x),u&&!i&&x.length>0&&v+t.length>1&&ie.uniqueSort(l)}return u&&(k=C,c=w),b};return n?se(i):i}(i,o))).selector=e}return s},l=ie.select=function(e,t,n,o){var i,l,c,u,p,f="function"==typeof e&&e,d=!o&&a(e=f.selector||e);if(n=n||[],1===d.length){if((l=d[0]=d[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&g&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=V.needsContext.test(e)?0:l.length;i--&&(c=l[i],!r.relative[u=c.type]);)if((p=r.find[u])&&(o=p(c.matches[0].replace(Z,ee),J.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(i,1),!(e=o.length&&ve(l)))return D.apply(n,o),n;break}}return(f||s(e,d))(o,t,!g,n,!t||J.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(L).join("")===x,n.detectDuplicates=!!p,f(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||ce(H,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),ie}(n);b.find=E,b.expr=E.selectors,b.expr[":"]=b.expr.pseudos,b.uniqueSort=b.unique=E.uniqueSort,b.text=E.getText,b.isXMLDoc=E.isXML,b.contains=E.contains,b.escapeSelector=E.escape;var S=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&b(e).is(n))break;r.push(e)}return r},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},j=b.expr.match.needsContext,A=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,P=/^.[^:#\[\.,]*$/;function N(e,t,n){return b.isFunction(t)?b.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?b.grep(e,function(e){return e===t!==n}):"string"!=typeof t?b.grep(e,function(e){return p.call(t,e)>-1!==n}):P.test(t)?b.filter(t,e,n):(t=b.filter(t,e),b.grep(e,function(e){return p.call(t,e)>-1!==n&&1===e.nodeType}))}b.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?b.find.matchesSelector(r,e)?[r]:[]:b.find.matches(e,b.grep(t,function(e){return 1===e.nodeType}))},b.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(b(e).filter(function(){for(t=0;t<r;t++)if(b.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)b.find(e,o[t],n);return r>1?b.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&j.test(e)?b(e):e||[],!1).length}});var D,F=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(b.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:F.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof b?t[0]:t,b.merge(this,b.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),A.test(r[1])&&b.isPlainObject(t))for(r in t)b.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=a.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b.isFunction(e)?void 0!==n.ready?n.ready(e):e(b):b.makeArray(e,this)}).prototype=b.fn,D=b(a);var O=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function M(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}b.fn.extend({has:function(e){var t=b(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(b.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&b(e);if(!j.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&b.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?b.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?p.call(b(e),this[0]):p.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(b.uniqueSort(b.merge(this.get(),b(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),b.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return S(e,"parentNode")},parentsUntil:function(e,t,n){return S(e,"parentNode",n)},next:function(e){return M(e,"nextSibling")},prev:function(e){return M(e,"previousSibling")},nextAll:function(e){return S(e,"nextSibling")},prevAll:function(e){return S(e,"previousSibling")},nextUntil:function(e,t,n){return S(e,"nextSibling",n)},prevUntil:function(e,t,n){return S(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return e.contentDocument||b.merge([],e.childNodes)}},function(e,t){b.fn[e]=function(n,r){var o=b.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=b.filter(r,o)),this.length>1&&(H[e]||b.uniqueSort(o),O.test(e)&&o.reverse()),this.pushStack(o)}});var q=/[^\x20\t\r\n\f]+/g;function R(e){return e}function B(e){throw e}function _(e,t,n){var r;try{e&&b.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&b.isFunction(r=e.then)?r.call(e,t,n):t.call(void 0,e)}catch(e){n.call(void 0,e)}}b.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return b.each(e.match(q)||[],function(e,n){t[n]=!0}),t}(e):b.extend({},e);var t,n,r,o,i=[],a=[],s=-1,l=function(){for(o=e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){b.each(n,function(n,r){b.isFunction(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==b.type(r)&&t(r)})}(arguments),n&&!t&&l()),this},remove:function(){return b.each(arguments,function(e,t){for(var n;(n=b.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--}),this},has:function(e){return e?b.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},b.extend({Deferred:function(e){var t=[["notify","progress",b.Callbacks("memory"),b.Callbacks("memory"),2],["resolve","done",b.Callbacks("once memory"),b.Callbacks("once memory"),0,"resolved"],["reject","fail",b.Callbacks("once memory"),b.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return b.Deferred(function(n){b.each(t,function(t,r){var o=b.isFunction(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&b.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){var i=0;function a(e,t,r,o){return function(){var s=this,l=arguments,c=function(){var n,c;if(!(e<i)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,b.isFunction(c)?o?c.call(n,a(i,t,R,o),a(i,t,B,o)):(i++,c.call(n,a(i,t,R,o),a(i,t,B,o),a(i,t,R,t.notifyWith))):(r!==R&&(s=void 0,l=[n]),(o||t.resolveWith)(s,l))}},u=o?c:function(){try{c()}catch(n){b.Deferred.exceptionHook&&b.Deferred.exceptionHook(n,u.stackTrace),e+1>=i&&(r!==B&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?u():(b.Deferred.getStackHook&&(u.stackTrace=b.Deferred.getStackHook()),n.setTimeout(u))}}return b.Deferred(function(n){t[0][3].add(a(0,n,b.isFunction(o)?o:R,n.notifyWith)),t[1][3].add(a(0,n,b.isFunction(e)?e:R)),t[2][3].add(a(0,n,b.isFunction(r)?r:B))}).promise()},promise:function(e){return null!=e?b.extend(e,o):o}},i={};return b.each(t,function(e,n){var a=n[2],s=n[5];o[n[1]]=a.add,s&&a.add(function(){r=s},t[3-e][2].disable,t[0][2].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=l.call(arguments),i=b.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?l.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(_(e,i.done(a(n)).resolve,i.reject),"pending"===i.state()||b.isFunction(o[n]&&o[n].then)))return i.then();for(;n--;)_(o[n],a(n),i.reject);return i.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;b.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&I.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},b.readyException=function(e){n.setTimeout(function(){throw e})};var $=b.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),n.removeEventListener("load",z),b.ready()}b.fn.ready=function(e){return $.then(e).catch(function(e){b.readyException(e)}),this},b.extend({isReady:!1,readyWait:1,holdReady:function(e){e?b.readyWait++:b.ready(!0)},ready:function(e){(!0===e?--b.readyWait:b.isReady)||(b.isReady=!0,!0!==e&&--b.readyWait>0||$.resolveWith(a,[b]))}}),b.ready.then=$.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(b.ready):(a.addEventListener("DOMContentLoaded",z),n.addEventListener("load",z));var U=function(e,t,n,r,o,i,a){var s=0,l=e.length,c=null==n;if("object"===b.type(n))for(s in o=!0,n)U(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,b.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(b(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):i},W=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=b.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[b.camelCase(t)]=n;else for(r in t)o[b.camelCase(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][b.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=b.isArray(t)?t.map(b.camelCase):(t=b.camelCase(t))in r?[t]:t.match(q)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||b.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!b.isEmptyObject(t)}};var V=new G,X=new G,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,K=/[A-Z]/g;function Q(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(K,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Y.test(e)?JSON.parse(e):e)}(n)}catch(e){}X.set(e,t,n)}else n=void 0;return n}b.extend({hasData:function(e){return X.hasData(e)||V.hasData(e)},data:function(e,t,n){return X.access(e,t,n)},removeData:function(e,t){X.remove(e,t)},_data:function(e,t,n){return V.access(e,t,n)},_removeData:function(e,t){V.remove(e,t)}}),b.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=X.get(i),1===i.nodeType&&!V.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=b.camelCase(r.slice(5)),Q(i,r,o[r]));V.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){X.set(this,e)}):U(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=X.get(i,e))?n:void 0!==(n=Q(i,e))?n:void 0;this.each(function(){X.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){X.remove(this,e)})}}),b.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=V.get(e,t),n&&(!r||b.isArray(n)?r=V.access(e,t,b.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=b.queue(e,t),r=n.length,o=n.shift(),i=b._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){b.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return V.get(e,n)||V.access(e,n,{empty:b.Callbacks("once memory").add(function(){V.remove(e,[t+"queue",n])})})}}),b.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?b.queue(this[0],e):void 0===t?this:this.each(function(){var n=b.queue(this,e,t);b._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&b.dequeue(this,e)})},dequeue:function(e){return this.each(function(){b.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=b.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=V.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var J=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Z=new RegExp("^(?:([+-])=|)("+J+")([a-z%]*)$","i"),ee=["Top","Right","Bottom","Left"],te=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&b.contains(e.ownerDocument,e)&&"none"===b.css(e,"display")},ne=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o};function re(e,t,n,r){var o,i=1,a=20,s=r?function(){return r.cur()}:function(){return b.css(e,t,"")},l=s(),c=n&&n[3]||(b.cssNumber[t]?"":"px"),u=(b.cssNumber[t]||"px"!==c&&+l)&&Z.exec(b.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=i=i||".5",b.style(e,t,u+c)}while(i!==(i=s()/l)&&1!==i&&--a)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var oe={};function ie(e){var t,n=e.ownerDocument,r=e.nodeName,o=oe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=b.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),oe[r]=o,o)}function ae(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=V.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&te(r)&&(o[i]=ie(r))):"none"!==n&&(o[i]="none",V.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}b.fn.extend({show:function(){return ae(this,!0)},hide:function(){return ae(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){te(this)?b(this).show():b(this).hide()})}});var se=/^(?:checkbox|radio)$/i,le=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ce=/^$|\/(?:java|ecma)script/i,ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function pe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&b.nodeName(e,t)?b.merge([e],n):n}function fe(e,t){for(var n=0,r=e.length;n<r;n++)V.set(e[n],"globalEval",!t||V.get(t[n],"globalEval"))}ue.optgroup=ue.option,ue.tbody=ue.tfoot=ue.colgroup=ue.caption=ue.thead,ue.th=ue.td;var de,he,ge=/<|&#?\w+;/;function me(e,t,n,r,o){for(var i,a,s,l,c,u,p=t.createDocumentFragment(),f=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if("object"===b.type(i))b.merge(f,i.nodeType?[i]:i);else if(ge.test(i)){for(a=a||p.appendChild(t.createElement("div")),s=(le.exec(i)||["",""])[1].toLowerCase(),l=ue[s]||ue._default,a.innerHTML=l[1]+b.htmlPrefilter(i)+l[2],u=l[0];u--;)a=a.lastChild;b.merge(f,a.childNodes),(a=p.firstChild).textContent=""}else f.push(t.createTextNode(i));for(p.textContent="",d=0;i=f[d++];)if(r&&b.inArray(i,r)>-1)o&&o.push(i);else if(c=b.contains(i.ownerDocument,i),a=pe(p.appendChild(i),"script"),c&&fe(a),n)for(u=0;i=a[u++];)ce.test(i.type||"")&&n.push(i);return p}de=a.createDocumentFragment().appendChild(a.createElement("div")),(he=a.createElement("input")).setAttribute("type","radio"),he.setAttribute("checked","checked"),he.setAttribute("name","t"),de.appendChild(he),v.checkClone=de.cloneNode(!0).cloneNode(!0).lastChild.checked,de.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!de.cloneNode(!0).lastChild.defaultValue;var ve=a.documentElement,ye=/^key/,be=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function we(){return!0}function ke(){return!1}function Te(){try{return a.activeElement}catch(e){}}function Ce(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ce(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=ke;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return b().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=b.guid++)),e.each(function(){b.event.add(this,t,o,r,n)})}b.event={global:{},add:function(e,t,n,r,o){var i,a,s,l,c,u,p,f,d,h,g,m=V.get(e);if(m)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&b.find.matchesSelector(ve,o),n.guid||(n.guid=b.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==b&&b.event.triggered!==t.type?b.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(q)||[""]).length;c--;)d=g=(s=xe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d&&(p=b.event.special[d]||{},d=(o?p.delegateType:p.bindType)||d,p=b.event.special[d]||{},u=b.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&b.expr.match.needsContext.test(o),namespace:h.join(".")},i),(f=l[d])||((f=l[d]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),p.add&&(p.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),b.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,s,l,c,u,p,f,d,h,g,m=V.hasData(e)&&V.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(q)||[""]).length;c--;)if(d=g=(s=xe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d){for(p=b.event.special[d]||{},f=l[d=(r?p.delegateType:p.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=f.length;i--;)u=f[i],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(f.splice(i,1),u.selector&&f.delegateCount--,p.remove&&p.remove.call(e,u));a&&!f.length&&(p.teardown&&!1!==p.teardown.call(e,h,m.handle)||b.removeEvent(e,d,m.handle),delete l[d])}else for(d in l)b.event.remove(e,d+t[c],n,r,!0);b.isEmptyObject(l)&&V.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=b.event.fix(e),l=new Array(arguments.length),c=(V.get(this,"events")||{})[s.type]||[],u=b.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=b.event.handlers.call(this,s,c),t=0;(o=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((b.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,o,i,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<l;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?b(o,this).index(c)>-1:b.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(b.Event.prototype,e,{enumerable:!0,configurable:!0,get:b.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[b.expando]?e:new b.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Te()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Te()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&b.nodeName(this,"input"))return this.click(),!1},_default:function(e){return b.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},b.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},b.Event=function(e,t){if(!(this instanceof b.Event))return new b.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?we:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&b.extend(this,t),this.timeStamp=e&&e.timeStamp||b.now(),this[b.expando]=!0},b.Event.prototype={constructor:b.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=we,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=we,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=we,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},b.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&be.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},b.event.addProp),b.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){b.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||b.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),b.fn.extend({on:function(e,t,n,r){return Ce(this,e,t,n,r)},one:function(e,t,n,r){return Ce(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,b(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){b.event.remove(this,e,n,t)})}});var Ee=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Se=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^true\/(.*)/,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pe(e,t){return b.nodeName(e,"table")&&b.nodeName(11!==t.nodeType?t:t.firstChild,"tr")&&e.getElementsByTagName("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){var t=je.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function Fe(e,t){var n,r,o,i,a,s,l,c;if(1===t.nodeType){if(V.hasData(e)&&(i=V.access(e),a=V.set(t,i),c=i.events))for(o in delete a.handle,a.events={},c)for(n=0,r=c[o].length;n<r;n++)b.event.add(t,o,c[o][n]);X.hasData(e)&&(s=X.access(e),l=b.extend({},s),X.set(t,l))}}function Oe(e,t,n,r){t=c.apply([],t);var o,i,a,s,l,u,p=0,f=e.length,d=f-1,h=t[0],g=b.isFunction(h);if(g||f>1&&"string"==typeof h&&!v.checkClone&&Le.test(h))return e.each(function(o){var i=e.eq(o);g&&(t[0]=h.call(this,o,i.html())),Oe(i,t,n,r)});if(f&&(i=(o=me(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=b.map(pe(o,"script"),Ne)).length;p<f;p++)l=o,p!==d&&(l=b.clone(l,!0,!0),s&&b.merge(a,pe(l,"script"))),n.call(e[p],l,p);if(s)for(u=a[a.length-1].ownerDocument,b.map(a,De),p=0;p<s;p++)l=a[p],ce.test(l.type||"")&&!V.access(l,"globalEval")&&b.contains(u,l)&&(l.src?b._evalUrl&&b._evalUrl(l.src):y(l.textContent.replace(Ae,""),u))}return e}function He(e,t,n){for(var r,o=t?b.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||b.cleanData(pe(r)),r.parentNode&&(n&&b.contains(r.ownerDocument,r)&&fe(pe(r,"script")),r.parentNode.removeChild(r));return e}b.extend({htmlPrefilter:function(e){return e.replace(Ee,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,s,l,c,u=e.cloneNode(!0),p=b.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||b.isXMLDoc(e)))for(a=pe(u),r=0,o=(i=pe(e)).length;r<o;r++)s=i[r],l=a[r],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&se.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(i=i||pe(e),a=a||pe(u),r=0,o=i.length;r<o;r++)Fe(i[r],a[r]);else Fe(e,u);return(a=pe(u,"script")).length>0&&fe(a,!p&&pe(e,"script")),u},cleanData:function(e){for(var t,n,r,o=b.event.special,i=0;void 0!==(n=e[i]);i++)if(W(n)){if(t=n[V.expando]){if(t.events)for(r in t.events)o[r]?b.event.remove(n,r):b.removeEvent(n,r,t.handle);n[V.expando]=void 0}n[X.expando]&&(n[X.expando]=void 0)}}}),b.fn.extend({detach:function(e){return He(this,e,!0)},remove:function(e){return He(this,e)},text:function(e){return U(this,function(e){return void 0===e?b.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Oe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pe(this,e).appendChild(e)})},prepend:function(){return Oe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Pe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Oe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(b.cleanData(pe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return b.clone(this,e,t)})},html:function(e){return U(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Se.test(e)&&!ue[(le.exec(e)||["",""])[1].toLowerCase()]){e=b.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(b.cleanData(pe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Oe(this,arguments,function(t){var n=this.parentNode;b.inArray(this,e)<0&&(b.cleanData(pe(this)),n&&n.replaceChild(t,this))},e)}}),b.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){b.fn[e]=function(e){for(var n,r=[],o=b(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),b(o[a])[t](n),u.apply(r,n.get());return this.pushStack(r)}});var Me=/^margin/,qe=new RegExp("^("+J+")(?!px)[a-z%]+$","i"),Re=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)};function Be(e,t,n){var r,o,i,a,s=e.style;return(n=n||Re(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||b.contains(e.ownerDocument,e)||(a=b.style(e,t)),!v.pixelMarginRight()&&qe.test(a)&&Me.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){l.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",l.innerHTML="",ve.appendChild(s);var e=n.getComputedStyle(l);t="1%"!==e.top,i="2px"===e.marginLeft,r="4px"===e.width,l.style.marginRight="50%",o="4px"===e.marginRight,ve.removeChild(s),l=null}}var t,r,o,i,s=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(l),b.extend(v,{pixelPosition:function(){return e(),t},boxSizingReliable:function(){return e(),r},pixelMarginRight:function(){return e(),o},reliableMarginLeft:function(){return e(),i}}))}();var Ie=/^(none|table(?!-c[ea]).+)/,$e={position:"absolute",visibility:"hidden",display:"block"},ze={letterSpacing:"0",fontWeight:"400"},Ue=["Webkit","Moz","ms"],We=a.createElement("div").style;function Ge(e){if(e in We)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in We)return e}function Ve(e,t,n){var r=Z.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Xe(e,t,n,r,o){var i,a=0;for(i=n===(r?"border":"content")?4:"width"===t?1:0;i<4;i+=2)"margin"===n&&(a+=b.css(e,n+ee[i],!0,o)),r?("content"===n&&(a-=b.css(e,"padding"+ee[i],!0,o)),"margin"!==n&&(a-=b.css(e,"border"+ee[i]+"Width",!0,o))):(a+=b.css(e,"padding"+ee[i],!0,o),"padding"!==n&&(a+=b.css(e,"border"+ee[i]+"Width",!0,o)));return a}function Ye(e,t,n){var r,o=!0,i=Re(e),a="border-box"===b.css(e,"boxSizing",!1,i);if(e.getClientRects().length&&(r=e.getBoundingClientRect()[t]),r<=0||null==r){if(((r=Be(e,t,i))<0||null==r)&&(r=e.style[t]),qe.test(r))return r;o=a&&(v.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+Xe(e,t,n||(a?"border":"content"),o,i)+"px"}function Ke(e,t,n,r,o){return new Ke.prototype.init(e,t,n,r,o)}b.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Be(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=b.camelCase(t),l=e.style;if(t=b.cssProps[s]||(b.cssProps[s]=Ge(s)||s),a=b.cssHooks[t]||b.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:l[t];"string"===(i=typeof n)&&(o=Z.exec(n))&&o[1]&&(n=re(e,t,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(b.cssNumber[s]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l[t]=n))}},css:function(e,t,n,r){var o,i,a,s=b.camelCase(t);return t=b.cssProps[s]||(b.cssProps[s]=Ge(s)||s),(a=b.cssHooks[t]||b.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Be(e,t,r)),"normal"===o&&t in ze&&(o=ze[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),b.each(["height","width"],function(e,t){b.cssHooks[t]={get:function(e,n,r){if(n)return!Ie.test(b.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ye(e,t,r):ne(e,$e,function(){return Ye(e,t,r)})},set:function(e,n,r){var o,i=r&&Re(e),a=r&&Xe(e,t,r,"border-box"===b.css(e,"boxSizing",!1,i),i);return a&&(o=Z.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=b.css(e,t)),Ve(0,n,a)}}}),b.cssHooks.marginLeft=_e(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Be(e,"marginLeft"))||e.getBoundingClientRect().left-ne(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),b.each({margin:"",padding:"",border:"Width"},function(e,t){b.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ee[r]+t]=i[r]||i[r-2]||i[0];return o}},Me.test(e)||(b.cssHooks[e+t].set=Ve)}),b.fn.extend({css:function(e,t){return U(this,function(e,t,n){var r,o,i={},a=0;if(b.isArray(t)){for(r=Re(e),o=t.length;a<o;a++)i[t[a]]=b.css(e,t[a],!1,r);return i}return void 0!==n?b.style(e,t,n):b.css(e,t)},e,t,arguments.length>1)}}),b.Tween=Ke,Ke.prototype={constructor:Ke,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||b.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(b.cssNumber[n]?"":"px")},cur:function(){var e=Ke.propHooks[this.prop];return e&&e.get?e.get(this):Ke.propHooks._default.get(this)},run:function(e){var t,n=Ke.propHooks[this.prop];return this.options.duration?this.pos=t=b.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ke.propHooks._default.set(this),this}},Ke.prototype.init.prototype=Ke.prototype,Ke.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=b.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){b.fx.step[e.prop]?b.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[b.cssProps[e.prop]]&&!b.cssHooks[e.prop]?e.elem[e.prop]=e.now:b.style(e.elem,e.prop,e.now+e.unit)}}},Ke.propHooks.scrollTop=Ke.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},b.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},b.fx=Ke.prototype.init,b.fx.step={};var Qe,Je,Ze=/^(?:toggle|show|hide)$/,et=/queueHooks$/;function tt(){Je&&(n.requestAnimationFrame(tt),b.fx.tick())}function nt(){return n.setTimeout(function(){Qe=void 0}),Qe=b.now()}function rt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ee[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ot(e,t,n){for(var r,o=(it.tweeners[t]||[]).concat(it.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function it(e,t,n){var r,o,i=0,a=it.prefilters.length,s=b.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=Qe||nt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:b.extend({},t),opts:b.extend(!0,{specialEasing:{},easing:b.easing._default},n),originalProperties:t,originalOptions:n,startTime:Qe||nt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=b.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=b.camelCase(n)],i=e[n],b.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=b.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);i<a;i++)if(r=it.prefilters[i].call(c,e,u,c.opts))return b.isFunction(r.stop)&&(b._queueHooks(c.elem,c.opts.queue).stop=b.proxy(r.stop,r)),r;return b.map(u,ot,c),b.isFunction(c.opts.start)&&c.opts.start.call(e,c),b.fx.timer(b.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}b.Animation=b.extend(it,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return re(n.elem,e,Z.exec(t),n),n}]},tweener:function(e,t){b.isFunction(e)?(t=e,e=["*"]):e=e.match(q);for(var n,r=0,o=e.length;r<o;r++)n=e[r],it.tweeners[n]=it.tweeners[n]||[],it.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,l,c,u,p="width"in t||"height"in t,f=this,d={},h=e.style,g=e.nodeType&&te(e),m=V.get(e,"fxshow");for(r in n.queue||(null==(a=b._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,b.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],Ze.test(o)){if(delete t[r],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;g=!0}d[r]=m&&m[r]||b.style(e,r)}if((l=!b.isEmptyObject(t))||!b.isEmptyObject(d))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=V.get(e,"display")),"none"===(u=b.css(e,"display"))&&(c?u=c:(ae([e],!0),c=e.style.display||c,u=b.css(e,"display"),ae([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===b.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,d)l||(m?"hidden"in m&&(g=m.hidden):m=V.access(e,"fxshow",{display:c}),i&&(m.hidden=!g),g&&ae([e],!0),f.done(function(){for(r in g||ae([e]),V.remove(e,"fxshow"),d)b.style(e,r,d[r])})),l=ot(g?m[r]:0,r,f),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?it.prefilters.unshift(e):it.prefilters.push(e)}}),b.speed=function(e,t,n){var r=e&&"object"==typeof e?b.extend({},e):{complete:n||!n&&t||b.isFunction(e)&&e,duration:e,easing:n&&t||t&&!b.isFunction(t)&&t};return b.fx.off||a.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in b.fx.speeds?r.duration=b.fx.speeds[r.duration]:r.duration=b.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b.isFunction(r.old)&&r.old.call(this),r.queue&&b.dequeue(this,r.queue)},r},b.fn.extend({fadeTo:function(e,t,n,r){return this.filter(te).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=b.isEmptyObject(e),i=b.speed(t,n,r),a=function(){var t=it(this,b.extend({},e),i);(o||V.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=b.timers,a=V.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&et.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||b.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=V.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=b.timers,a=r?r.length:0;for(n.finish=!0,b.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),b.each(["toggle","show","hide"],function(e,t){var n=b.fn[t];b.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(rt(t,!0),e,r,o)}}),b.each({slideDown:rt("show"),slideUp:rt("hide"),slideToggle:rt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){b.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),b.timers=[],b.fx.tick=function(){var e,t=0,n=b.timers;for(Qe=b.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||b.fx.stop(),Qe=void 0},b.fx.timer=function(e){b.timers.push(e),e()?b.fx.start():b.timers.pop()},b.fx.interval=13,b.fx.start=function(){Je||(Je=n.requestAnimationFrame?n.requestAnimationFrame(tt):n.setInterval(b.fx.tick,b.fx.interval))},b.fx.stop=function(){n.cancelAnimationFrame?n.cancelAnimationFrame(Je):n.clearInterval(Je),Je=null},b.fx.speeds={slow:600,fast:200,_default:400},b.fn.delay=function(e,t){return e=b.fx&&b.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var at,st=b.expr.attrHandle;b.fn.extend({attr:function(e,t){return U(this,b.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){b.removeAttr(this,e)})}}),b.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?b.prop(e,t,n):(1===i&&b.isXMLDoc(e)||(o=b.attrHooks[t.toLowerCase()]||(b.expr.match.bool.test(t)?at:void 0)),void 0!==n?null===n?void b.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=b.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&b.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(q);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),at={set:function(e,t,n){return!1===t?b.removeAttr(e,n):e.setAttribute(n,n),n}},b.each(b.expr.match.bool.source.match(/\w+/g),function(e,t){var n=st[t]||b.find.attr;st[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=st[a],st[a]=o,o=null!=n(e,t,r)?a:null,st[a]=i),o}});var lt=/^(?:input|select|textarea|button)$/i,ct=/^(?:a|area)$/i;function ut(e){return(e.match(q)||[]).join(" ")}function pt(e){return e.getAttribute&&e.getAttribute("class")||""}b.fn.extend({prop:function(e,t){return U(this,b.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[b.propFix[e]||e]})}}),b.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&b.isXMLDoc(e)||(t=b.propFix[t]||t,o=b.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=b.find.attr(e,"tabindex");return t?parseInt(t,10):lt.test(e.nodeName)||ct.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(b.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),b.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){b.propFix[this.toLowerCase()]=this}),b.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,l=0;if(b.isFunction(e))return this.each(function(t){b(this).addClass(e.call(this,t,pt(this)))});if("string"==typeof e&&e)for(t=e.match(q)||[];n=this[l++];)if(o=pt(n),r=1===n.nodeType&&" "+ut(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=ut(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,l=0;if(b.isFunction(e))return this.each(function(t){b(this).removeClass(e.call(this,t,pt(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(q)||[];n=this[l++];)if(o=pt(n),r=1===n.nodeType&&" "+ut(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=ut(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):b.isFunction(e)?this.each(function(n){b(this).toggleClass(e.call(this,n,pt(this),t),t)}):this.each(function(){var t,r,o,i;if("string"===n)for(r=0,o=b(this),i=e.match(q)||[];t=i[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=pt(this))&&V.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":V.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+ut(pt(n))+" ").indexOf(t)>-1)return!0;return!1}});var ft=/\r/g;b.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=b.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,b(this).val()):e)?o="":"number"==typeof o?o+="":b.isArray(o)&&(o=b.map(o,function(e){return null==e?"":e+""})),(t=b.valHooks[this.type]||b.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=b.valHooks[o.type]||b.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(ft,""):null==n?"":n:void 0}}),b.extend({valHooks:{option:{get:function(e){var t=b.find.attr(e,"value");return null!=t?t:ut(b.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?i+1:o.length;for(r=i<0?l:a?i:0;r<l;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!b.nodeName(n.parentNode,"optgroup"))){if(t=b(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=b.makeArray(t),a=o.length;a--;)((r=o[a]).selected=b.inArray(b.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),b.each(["radio","checkbox"],function(){b.valHooks[this]={set:function(e,t){if(b.isArray(t))return e.checked=b.inArray(b(e).val(),t)>-1}},v.checkOn||(b.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var dt=/^(?:focusinfocus|focusoutblur)$/;b.extend(b.event,{trigger:function(e,t,r,o){var i,s,l,c,u,p,f,d=[r||a],g=h.call(e,"type")?e.type:e,m=h.call(e,"namespace")?e.namespace.split("."):[];if(s=l=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!dt.test(g+b.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),u=g.indexOf(":")<0&&"on"+g,(e=e[b.expando]?e:new b.Event(g,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:b.makeArray(t,[e]),f=b.event.special[g]||{},o||!f.trigger||!1!==f.trigger.apply(r,t))){if(!o&&!f.noBubble&&!b.isWindow(r)){for(c=f.delegateType||g,dt.test(c+g)||(s=s.parentNode);s;s=s.parentNode)d.push(s),l=s;l===(r.ownerDocument||a)&&d.push(l.defaultView||l.parentWindow||n)}for(i=0;(s=d[i++])&&!e.isPropagationStopped();)e.type=i>1?c:f.bindType||g,(p=(V.get(s,"events")||{})[e.type]&&V.get(s,"handle"))&&p.apply(s,t),(p=u&&s[u])&&p.apply&&W(s)&&(e.result=p.apply(s,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(d.pop(),t)||!W(r)||u&&b.isFunction(r[g])&&!b.isWindow(r)&&((l=r[u])&&(r[u]=null),b.event.triggered=g,r[g](),b.event.triggered=void 0,l&&(r[u]=l)),e.result}},simulate:function(e,t,n){var r=b.extend(new b.Event,n,{type:e,isSimulated:!0});b.event.trigger(r,null,t)}}),b.fn.extend({trigger:function(e,t){return this.each(function(){b.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return b.event.trigger(e,t,n,!0)}}),b.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){b.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),b.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),v.focusin="onfocusin"in n,v.focusin||b.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){b.event.simulate(t,e.target,b.event.fix(e))};b.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=V.access(r,t);o||r.addEventListener(e,n,!0),V.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=V.access(r,t)-1;o?V.access(r,t,o):(r.removeEventListener(e,n,!0),V.remove(r,t))}}});var ht=n.location,gt=b.now(),mt=/\?/;b.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||b.error("Invalid XML: "+e),t};var vt=/\[\]$/,yt=/\r?\n/g,bt=/^(?:submit|button|image|reset|file)$/i,xt=/^(?:input|select|textarea|keygen)/i;function wt(e,t,n,r){var o;if(b.isArray(t))b.each(t,function(t,o){n||vt.test(e)?r(e,o):wt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==b.type(t))r(e,t);else for(o in t)wt(e+"["+o+"]",t[o],n,r)}b.param=function(e,t){var n,r=[],o=function(e,t){var n=b.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(b.isArray(e)||e.jquery&&!b.isPlainObject(e))b.each(e,function(){o(this.name,this.value)});else for(n in e)wt(n,e[n],t,o);return r.join("&")},b.fn.extend({serialize:function(){return b.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=b.prop(this,"elements");return e?b.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!b(this).is(":disabled")&&xt.test(this.nodeName)&&!bt.test(e)&&(this.checked||!se.test(e))}).map(function(e,t){var n=b(this).val();return null==n?null:b.isArray(n)?b.map(n,function(e){return{name:t.name,value:e.replace(yt,"\r\n")}}):{name:t.name,value:n.replace(yt,"\r\n")}}).get()}});var kt=/%20/g,Tt=/#.*$/,Ct=/([?&])_=[^&]*/,Et=/^(.*?):[ \t]*([^\r\n]*)$/gm,St=/^(?:GET|HEAD)$/,Lt=/^\/\//,jt={},At={},Pt="*/".concat("*"),Nt=a.createElement("a");function Dt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(q)||[];if(b.isFunction(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ft(e,t,n,r){var o={},i=e===At;function a(s){var l;return o[s]=!0,b.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Ot(e,t){var n,r,o=b.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&b.extend(!0,e,r),e}Nt.href=ht.href,b.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ht.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ht.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Pt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":b.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ot(Ot(e,b.ajaxSettings),t):Ot(b.ajaxSettings,e)},ajaxPrefilter:Dt(jt),ajaxTransport:Dt(At),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,o,i,s,l,c,u,p,f,d,h=b.ajaxSetup({},t),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?b(g):b.event,v=b.Deferred(),y=b.Callbacks("once memory"),x=h.statusCode||{},w={},k={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Et.exec(i);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)C.always(e[C.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),E(0,t),this}};if(v.promise(C),h.url=((e||h.url||ht.href)+"").replace(Lt,ht.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(q)||[""],null==h.crossDomain){c=a.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Nt.protocol+"//"+Nt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=b.param(h.data,h.traditional)),Ft(jt,h,t,C),u)return C;for(f in(p=b.event&&h.global)&&0==b.active++&&b.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!St.test(h.type),o=h.url.replace(Tt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(kt,"+")):(d=h.url.slice(o.length),h.data&&(o+=(mt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ct,"$1"),d=(mt.test(o)?"&":"?")+"_="+gt+++d),h.url=o+d),h.ifModified&&(b.lastModified[o]&&C.setRequestHeader("If-Modified-Since",b.lastModified[o]),b.etag[o]&&C.setRequestHeader("If-None-Match",b.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Pt+"; q=0.01":""):h.accepts["*"]),h.headers)C.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,C,h)||u))return C.abort();if(T="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),r=Ft(At,h,t,C)){if(C.readyState=1,p&&m.trigger("ajaxSend",[C,h]),u)return C;h.async&&h.timeout>0&&(l=n.setTimeout(function(){C.abort("timeout")},h.timeout));try{u=!1,r.send(w,E)}catch(e){if(u)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,a,s){var c,f,d,w,k,T=t;u||(u=!0,l&&n.clearTimeout(l),r=void 0,i=s||"",C.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(h,C,a)),w=function(e,t,n,r){var o,i,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=c[l+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(h,w,C,c),c?(h.ifModified&&((k=C.getResponseHeader("Last-Modified"))&&(b.lastModified[o]=k),(k=C.getResponseHeader("etag"))&&(b.etag[o]=k)),204===e||"HEAD"===h.type?T="nocontent":304===e?T="notmodified":(T=w.state,f=w.data,c=!(d=w.error))):(d=T,!e&&T||(T="error",e<0&&(e=0))),C.status=e,C.statusText=(t||T)+"",c?v.resolveWith(g,[f,T,C]):v.rejectWith(g,[C,T,d]),C.statusCode(x),x=void 0,p&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?f:d]),y.fireWith(g,[C,T]),p&&(m.trigger("ajaxComplete",[C,h]),--b.active||b.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return b.get(e,t,n,"json")},getScript:function(e,t){return b.get(e,void 0,t,"script")}}),b.each(["get","post"],function(e,t){b[t]=function(e,n,r,o){return b.isFunction(n)&&(o=o||r,r=n,n=void 0),b.ajax(b.extend({url:e,type:t,dataType:o,data:n,success:r},b.isPlainObject(e)&&e))}}),b._evalUrl=function(e){return b.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},b.fn.extend({wrapAll:function(e){var t;return this[0]&&(b.isFunction(e)&&(e=e.call(this[0])),t=b(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b.isFunction(e)?this.each(function(t){b(this).wrapInner(e.call(this,t))}):this.each(function(){var t=b(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b.isFunction(e);return this.each(function(n){b(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){b(this).replaceWith(this.childNodes)}),this}}),b.expr.pseudos.hidden=function(e){return!b.expr.pseudos.visible(e)},b.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},b.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},Mt=b.ajaxSettings.xhr();v.cors=!!Mt&&"withCredentials"in Mt,v.ajax=Mt=!!Mt,b.ajaxTransport(function(e){var t,r;if(v.cors||Mt&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Ht[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),b.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),b.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return b.globalEval(e),e}}}),b.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),b.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,o){t=b("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var qt,Rt=[],Bt=/(=)\?(?=&|$)|\?\?/;function _t(e){return b.isWindow(e)?e:9===e.nodeType&&e.defaultView}b.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Rt.pop()||b.expando+"_"+gt++;return this[e]=!0,e}}),b.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,a,s=!1!==e.jsonp&&(Bt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=b.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Bt,"$1"+o):!1!==e.jsonp&&(e.url+=(mt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||b.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always(function(){void 0===i?b(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Rt.push(o)),a&&b.isFunction(i)&&i(a[0]),a=i=void 0}),"script"}),v.createHTMLDocument=((qt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===qt.childNodes.length),b.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=!n&&[],(o=A.exec(e))?[t.createElement(o[1])]:(o=me([e],t,i),i&&i.length&&b(i).remove(),b.merge([],o.childNodes)));var r,o,i},b.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return s>-1&&(r=ut(e.slice(s)),e=e.slice(0,s)),b.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&b.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?b("<div>").append(b.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},b.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){b.fn[t]=function(e){return this.on(t,e)}}),b.expr.pseudos.animated=function(e){return b.grep(b.timers,function(t){return e===t.elem}).length},b.offset={setOffset:function(e,t,n){var r,o,i,a,s,l,c=b.css(e,"position"),u=b(e),p={};"static"===c&&(e.style.position="relative"),s=u.offset(),i=b.css(e,"top"),l=b.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(a=(r=u.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),b.isFunction(t)&&(t=t.call(e,n,b.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+o),"using"in t?t.using.call(e,p):u.css(p)}},b.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){b.offset.setOffset(this,e,t)});var t,n,r,o,i=this[0];return i?i.getClientRects().length?(r=i.getBoundingClientRect()).width||r.height?(n=_t(o=i.ownerDocument),t=o.documentElement,{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r:{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===b.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),b.nodeName(e[0],"html")||(r=e.offset()),r={top:r.top+b.css(e[0],"borderTopWidth",!0),left:r.left+b.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-b.css(n,"marginTop",!0),left:t.left-r.left-b.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===b.css(e,"position");)e=e.offsetParent;return e||ve})}}),b.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;b.fn[e]=function(r){return U(this,function(e,r,o){var i=_t(e);if(void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),b.each(["top","left"],function(e,t){b.cssHooks[t]=_e(v.pixelPosition,function(e,n){if(n)return n=Be(e,t),qe.test(n)?b(e).position()[t]+"px":n})}),b.each({Height:"height",Width:"width"},function(e,t){b.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){b.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===i?"margin":"border");return U(this,function(t,n,o){var i;return b.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?b.css(t,n,s):b.style(t,n,o,s)},t,a?o:void 0,a)}})}),b.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),b.parseJSON=JSON.parse,void 0===(r=function(){return b}.apply(t,[]))||(e.exports=r);var It=n.jQuery,$t=n.$;return b.noConflict=function(e){return n.$===b&&(n.$=$t),e&&n.jQuery===b&&(n.jQuery=It),b},o||(n.jQuery=n.$=b),b})},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){n(4);var r=n(1),o=n(0),i=n(9),a=n(10),s=n(11);n(12),n(13),n(14);var l=location.href.split("?")[1];l=l&&l.split("&")||[];var c={};r.each(l,function(e,t){var n=(t||"").split("=");n&&n[0]&&n[1]&&(c[n[0]]=n[1])});var u=new o.Converter({extensions:["prettify","tasklist","footnote"],tables:!0});({currentState:"edit",init:function(){var e=this;e.load().then(function(){e.start(function(){window.location.href.indexOf("dev")>-1&&r(".convert-button").click()})}).fail(function(){e.start()})},start:function(e){this.bindEvt(e),this.updateOutput(),new a,new s,new i(".btn")},load:function(){return r.ajax({type:"GET",url:c.path||"./demo.md",dateType:"text",data:{_t:1*new Date},timeout:2e3}).then(function(e){r("#input").val(e)})},bindEvt:function(e){var t=this;r("#input").on("input keydown paste",t.updateOutput);var n=r(".copy-button"),o=r(".convert-button");o.on("click",function(){var e=r(this);"preview"===t.currentState?(t.currentState="edit",e.text("预览"),n.hide(),r("#input").fadeIn(),r("#output").hide()):(t.currentState="preview",e.text("编辑"),n.show(),r("#input").fadeOut(),r("#output").show())}),c.preview&&o.trigger("click"),e&&e()},updateOutput:function(){var e=u.makeHtml(r("#input").val());r("#output .wrapper").html(e),r("#outputCtt li").each(function(){r(this).html("<span><span>"+r(this).html()+"</span></span>")});var t=setTimeout(function(){clearTimeout(t),t=null,r("#output h2").map(function(e,t){r(t).append(r('<i class="tri"></i>'))})},30)}}).init()},function(e,t,n){var r=n(5);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(2)(!1)).i(n(6),""),t.push([e.i,"@charset \"utf-8\";\n* {\n  margin: 0;\n  padding: 0;\n}\n/* 防止用户自定义背景颜色对网页的影响，添加让用户可以自定义字体 */\nhtml {\n  color: #333;\n  background: #fff;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  text-rendering: optimizelegibility;\n}\n/* 如果你的项目仅支持 IE9+ | Chrome | Firefox 等，推荐在 <html> 中添加 .borderbox 这个 class */\nhtml.borderbox *,\nhtml.borderbox *:before,\nhtml.borderbox *:after {\n  -moz-box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n  box-sizing: border-box;\n}\n/* 内外边距通常让各个浏览器样式的表现位置不同 */\nbody,\ndl,\ndt,\ndd,\nul,\nol,\nli,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\npre,\ncode,\nform,\nfieldset,\nlegend,\ninput,\ntextarea,\np,\nblockquote,\nth,\ntd,\nhr,\nbutton,\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmenu,\nnav,\nsection {\n  margin: 0;\n  padding: 0;\n}\n/* 重设 HTML5 标签, IE 需要在 js 中 createElement(TAG) */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nmenu,\nnav,\nsection {\n  display: block;\n}\n/* HTML5 媒体文件跟 img 保持一致 */\naudio,\ncanvas,\nvideo {\n  display: inline-block;\n}\n/* 要注意表单元素并不继承父级 font 的问题 */\nbody,\nbutton,\ninput,\nselect,\ntextarea {\n  font: 300 1em/1.8 'PingFang SC', 'Lantinghei SC', 'Microsoft Yahei', 'Hiragino Sans GB', 'Microsoft Sans Serif', 'WenQuanYi Micro Hei', 'sans';\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\n/* 去掉各Table cell 的边距并让其边重合 */\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n/* 去除默认边框 */\nfieldset,\nimg {\n  border: 0;\n}\n/* 块/段落引用 */\nblockquote {\n  position: relative;\n  color: #999;\n  font-weight: 400;\n  border-left: 1px solid #1abc9c;\n  padding-left: 1em;\n  margin: 1em 0 1em 2em;\n}\n@media only screen and (max-width: 640px) {\n  blockquote {\n    margin: 1em 0;\n  }\n}\n/* Firefox 以外，元素没有下划线，需添加 */\nacronym,\nabbr {\n  border-bottom: 1px dotted;\n  font-variant: normal;\n}\n/* 添加鼠标问号，进一步确保应用的语义是正确的（要知道，交互他们也有洁癖，如果你不去掉，那得多花点口舌） */\nabbr {\n  cursor: help;\n}\n/* 一致的 del 样式 */\ndel {\n  text-decoration: line-through;\n}\naddress,\ncaption,\ncite,\ncode,\ndfn,\nem,\nth,\nvar {\n  font-style: normal;\n  font-weight: 400;\n}\n/* 去掉列表前的标识, li 会继承，大部分网站通常用列表来很多内容，所以应该当去 */\nul,\nol {\n  list-style: none;\n}\n/* 对齐是排版最重要的因素, 别让什么都居中 */\ncaption,\nth {\n  text-align: left;\n}\nq:before,\nq:after {\n  content: '';\n}\n/* 统一上标和下标 */\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n}\n:root sub,\n:root sup {\n  vertical-align: baseline;\n  /* for ie9 and other modern browsers */\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\n/* 让链接在 hover 状态下显示下划线 */\na {\n  color: #1abc9c;\n}\na:hover {\n  text-decoration: underline;\n}\n.typo a {\n  border-bottom: 1px solid #1abc9c;\n}\n.typo a:hover {\n  border-bottom-color: #555;\n  color: #555;\n  text-decoration: none;\n}\n/* 默认不显示下划线，保持页面简洁 */\nins,\na {\n  text-decoration: none;\n}\n/* 专名号：虽然 u 已经重回 html5 Draft，但在所有浏览器中都是可以使用的，\n * 要做到更好，向后兼容的话，添加 class=\"typo-u\" 来显示专名号\n * 关于 <u> 标签：http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-u-element\n * 被放弃的是 4，之前一直搞错 http://www.w3.org/TR/html401/appendix/changes.html#idx-deprecated\n * 一篇关于 <u> 标签的很好文章：http://html5doctor.com/u-element/\n */\nu,\n.typo-u {\n  text-decoration: underline;\n}\n/* 标记，类似于手写的荧光笔的作用 */\nmark {\n  background: #fffdd1;\n  border-bottom: 1px solid #ffedce;\n  padding: 2px;\n  margin: 0 5px;\n}\n/* 代码片断 */\npre,\ncode,\npre tt {\n  font-family: Courier, 'Courier New', monospace;\n}\npre {\n  background: #f8f8f8;\n  border: 1px solid #ddd;\n  padding: 1em 1.5em;\n  display: block;\n  -webkit-overflow-scrolling: touch;\n}\n/* 一致化 horizontal rule */\nhr {\n  border: none;\n  border-bottom: 1px solid #cfcfcf;\n  margin-bottom: 0.8em;\n  height: 10px;\n}\n/* 底部印刷体、版本等标记 */\nsmall,\n.typo-small,\nfigcaption {\n  font-size: 0.9em;\n  color: #888;\n}\nstrong,\nb {\n  font-weight: bold;\n  color: #000;\n}\n/* 可拖动文件添加拖动手势 */\n[draggable] {\n  cursor: move;\n}\n.clearfix:before,\n.clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n}\n.clearfix {\n  zoom: 1;\n}\n/* 强制文本换行 */\n.textwrap,\n.textwrap td,\n.textwrap th {\n  word-wrap: break-word;\n  word-break: break-all;\n}\n.textwrap-table {\n  table-layout: fixed;\n}\n/* 提供 serif 版本的字体设置: iOS 下中文自动 fallback 到 sans-serif */\n.serif {\n  font-family: Palatino, Optima, Georgia, serif;\n}\n/* 保证块/段落之间的空白隔行 */\n.typo p,\n.typo pre,\n.typo ul,\n.typo ol,\n.typo dl,\n.typo form,\n.typo hr,\n.typo table,\n.typo-p,\n.typo-pre,\n.typo-ul,\n.typo-ol,\n.typo-dl,\n.typo-form,\n.typo-hr,\n.typo-table,\nblockquote {\n  margin-bottom: 1.2em;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: PingFang SC, Verdana, Helvetica Neue, Microsoft Yahei, Hiragino Sans GB, Microsoft Sans Serif, WenQuanYi Micro Hei, sans-serif;\n  font-weight: 100;\n  color: #000;\n  line-height: 1.35;\n}\n/* 标题应该更贴紧内容，并与其他块区分，margin 值要相应做优化 */\n.typo h1,\n.typo h2,\n.typo h3,\n.typo h4,\n.typo h5,\n.typo h6,\n.typo-h1,\n.typo-h2,\n.typo-h3,\n.typo-h4,\n.typo-h5,\n.typo-h6 {\n  margin-top: 1.2em;\n  margin-bottom: 0.6em;\n  line-height: 1.35;\n}\n.typo h1,\n.typo-h1 {\n  font-size: 2em;\n}\n.typo h2,\n.typo-h2 {\n  font-size: 1.8em;\n}\n.typo h3,\n.typo-h3 {\n  font-size: 1.6em;\n}\n.typo h4,\n.typo-h4 {\n  font-size: 1.4em;\n}\n.typo h5,\n.typo h6,\n.typo-h5,\n.typo-h6 {\n  font-size: 1.2em;\n}\n/* 在文章中，应该还原 ul 和 ol 的样式 */\n.typo ul,\n.typo-ul {\n  margin-left: 1.3em;\n  list-style: disc;\n}\n.typo ol,\n.typo-ol {\n  list-style: decimal;\n  margin-left: 1.9em;\n}\n.typo li ul,\n.typo li ol,\n.typo-ul ul,\n.typo-ul ol,\n.typo-ol ul,\n.typo-ol ol {\n  margin-bottom: 0.8em;\n  margin-left: 2em;\n}\n.typo li ul,\n.typo-ul ul,\n.typo-ol ul {\n  list-style: circle;\n}\n/* 同 ul/ol，在文章中应用 table 基本格式 */\n.typo table th,\n.typo table td,\n.typo-table th,\n.typo-table td,\n.typo table caption {\n  border: 1px solid #ddd;\n  padding: 0.5em 1em;\n  color: #666;\n}\n.typo table th,\n.typo-table th {\n  background: #fbfbfb;\n}\n.typo table thead th,\n.typo-table thead th {\n  background: #f1f1f1;\n}\n.typo table caption {\n  border-bottom: none;\n}\n/* 去除 webkit 中 input 和 textarea 的默认样式  */\n.typo-input,\n.typo-textarea {\n  -webkit-appearance: none;\n  border-radius: 0;\n}\n.typo-em,\n.typo em,\nlegend,\ncaption {\n  color: #000;\n  font-weight: inherit;\n}\n/* 着重号，只能在少量（少于100个字符）且全是全角字符的情况下使用 */\n.typo-em {\n  position: relative;\n}\n.typo-em:after {\n  position: absolute;\n  top: 0.65em;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  content: \"・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・\";\n}\n/* Responsive images */\n.typo img {\n  max-width: 100%;\n}\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  background: #F0F0F0;\n}\n.hljs,\n.hljs-subst {\n  color: #444;\n}\n.hljs-comment {\n  color: #888888;\n}\n.hljs-attribute,\n.hljs-doctag,\n.hljs-keyword,\n.hljs-meta-keyword,\n.hljs-name,\n.hljs-selector-tag {\n  font-weight: bold;\n}\n.hljs-deletion,\n.hljs-number,\n.hljs-quote,\n.hljs-selector-class,\n.hljs-selector-id,\n.hljs-string,\n.hljs-template-tag,\n.hljs-type {\n  color: #880000;\n}\n.hljs-section,\n.hljs-title {\n  color: #880000;\n  font-weight: bold;\n}\n.hljs-link,\n.hljs-regexp,\n.hljs-selector-attr,\n.hljs-selector-pseudo,\n.hljs-symbol,\n.hljs-template-variable,\n.hljs-variable {\n  color: #BC6060;\n}\n.hljs-literal {\n  color: #78A960;\n}\n.hljs-addition,\n.hljs-built_in,\n.hljs-bullet,\n.hljs-code {\n  color: #397300;\n}\n.hljs-meta {\n  color: #1f7199;\n}\n.hljs-meta-string {\n  color: #4d99bf;\n}\n.hljs-emphasis {\n  font-style: italic;\n}\n.hljs-strong {\n  font-weight: bold;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-family: -apple-system-font, BlinkMacSystemFont, \"Helvetica Neue\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei UI\", \"Microsoft YaHei\", Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.6em;\n  color: #333;\n}\na {\n  color: #1e6bb8;\n  text-decoration: none;\n}\na:hover {\n  text-decoration: underline;\n}\n:first-child {\n  margin-top: 0;\n}\nimg {\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n  max-width: 100%;\n}\np > img {\n  text-align: center;\n  display: block;\n  margin: 0 auto;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin-top: 1.5rem;\n  margin-bottom: 0.4rem;\n  font-weight: normal;\n  color: #000;\n  position: relative;\n  padding-left: 8px;\n}\nh1 > .tri,\nh2 > .tri,\nh3 > .tri,\nh4 > .tri,\nh5 > .tri,\nh6 > .tri {\n  content: '';\n  position: absolute;\n  left: -2px;\n  width: 0;\n  top: 10px;\n  border-left: 3px solid transparent;\n  border-top: 3px solid #44B549;\n  border-right: 3px solid #44B549;\n  border-bottom: 3px solid transparent;\n  transform: rotate(45deg);\n}\np {\n  margin-bottom: 20px;\n  text-align: justify;\n  color: #333333;\n}\nblockquote > p {\n  letter-spacing: 0px;\n}\nli p span {\n  font-size: 14px;\n  line-height: 1.4em;\n  font-weight: bold;\n  color: #000;\n}\npre p {\n  margin: 0;\n}\npre ul,\npre ol {\n  margin: 0;\n  padding-top: 12px;\n  padding-bottom: 12px;\n}\npre code,\npre tt {\n  display: inline;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  border: 0;\n}\npre code:before,\npre code:after,\npre tt:before,\npre tt:after {\n  content: normal;\n}\nul,\nol {\n  margin-top: 0;\n}\nblockquote {\n  padding: 15px 1rem;\n  font-size: 14px;\n  line-height: 18px;\n  padding-right: 15px;\n  margin-left: 0;\n  color: #819198;\n  border-left: 6px solid #dce6f0;\n  background: #f2f7fb;\n}\nblockquote > :first-child {\n  margin-top: 0;\n}\nblockquote > :last-child {\n  margin-bottom: 0;\n}\ntable {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\ntable th {\n  font-weight: bold;\n}\ntable th,\ntable td {\n  padding: 0.5rem 1rem;\n  border: 1px solid #e9ebec;\n}\ndl {\n  padding: 0;\n}\ndl dt {\n  padding: 0;\n  margin-top: 1rem;\n  font-size: 1rem;\n  font-weight: bold;\n}\ndl dd {\n  padding: 0;\n  margin-bottom: 1rem;\n}\nhr {\n  height: 1px;\n  margin: 1.5rem 0;\n  border: none;\n  border-top: 1px dashed #A5A5A5;\n}\nbutton,\ntextarea,\nselect {\n  outline: none;\n}\nbody,\nhtml {\n  overflow: hidden;\n}\nol {\n  list-style-type: decimal !important;\n}\n.prettyprint {\n  font-family: Consolas, Menlo, Courier, monospace;\n}\n.prettyprint pre p {\n  min-height: 10px;\n}\n#list1 ul {\n  padding-left: 10px;\n}\nul li.task-list-list {\n  list-style-type: none;\n  padding: 0 10px;\n}\nul,\nol {\n  margin: 0;\n  padding: 0;\n  padding-left: 40px;\n}\n.task-list-list {\n  margin: 0;\n  padding: 0;\n}\ntable {\n  display: table;\n  width: 100%;\n}\ntable tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n.task-list-list.checked {\n  color: #159957;\n}\n.task-list-list.uncheck {\n  color: #bfc1bf;\n}\n.task-list-list img {\n  height: 20px;\n  width: 20px;\n  margin: 0 10px;\n  top: 4px;\n  position: relative;\n}\nh1.super {\n  white-space: normal;\n  border: none;\n  margin: 5px 0 0;\n  padding: 10px;\n  font-size: 24px;\n  line-height: 20px;\n  border-left-width: 6px;\n  border-left-style: solid;\n  border-radius: 3px;\n  color: #FFFBF0;\n  border-left-color: #30DFF3;\n  background-color: #4B5CC4;\n}\nh2.super {\n  white-space: normal;\n  border: none;\n  margin: 5px 0 0;\n  padding: 10px;\n  font-size: 20px;\n  line-height: 20px;\n  border-left-width: 12px;\n  border-left-style: solid;\n  border-radius: 3px;\n  color: #FFFBF0;\n  border-left-color: #30DFF3;\n  background-color: #4B5CC4;\n}\nh3.super {\n  white-space: normal;\n  border: none;\n  margin: 5px 0 0;\n  padding: 10px;\n  font-size: 18px;\n  line-height: 20px;\n  border-left-width: 18px;\n  border-left-style: solid;\n  border-radius: 3px;\n  color: #FFFBF0;\n  border-left-color: #30DFF3;\n  background-color: #4B5CC4;\n}\nh4.super {\n  white-space: normal;\n  border: none;\n  margin: 5px 0 0;\n  padding: 10px;\n  font-size: 16px;\n  line-height: 20px;\n  border-left-width: 24px;\n  border-left-style: solid;\n  border-radius: 3px;\n  color: #FFFBF0;\n  border-left-color: #30DFF3;\n  background-color: #4B5CC4;\n}\nruby {\n  background-color: rgba(67, 193, 105, 0.5);\n  margin: 4px;\n  padding-right: 2px;\n  padding-left: 2px;\n}\nruby rt {\n  font-style: italic;\n  background-color: rgba(67, 193, 105, 0.2);\n}\n.icon_uncheck,\n.icon_check {\n  display: inline-block;\n  vertical-align: middle;\n  width: 20px;\n  height: 20px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  margin-right: 4px;\n}\n.pln {\n  color: #000;\n}\n@media screen {\n  .str {\n    color: #080;\n  }\n  .kwd {\n    color: #008;\n  }\n  .com {\n    color: #800;\n  }\n  .typ {\n    color: #606;\n  }\n  .lit {\n    color: #066;\n  }\n  .pun,\n  .opn,\n  .clo {\n    color: #660;\n  }\n  .tag {\n    color: #008;\n  }\n  .atn {\n    color: #606;\n  }\n  .atv {\n    color: #080;\n  }\n  .dec,\n  .var {\n    color: #606;\n  }\n  .fun {\n    color: red;\n  }\n}\n@media print, projection {\n  .str {\n    color: #060;\n  }\n  .kwd {\n    color: #006;\n    font-weight: bold;\n  }\n  .com {\n    color: #600;\n    font-style: italic;\n  }\n  .typ {\n    color: #404;\n    font-weight: bold;\n  }\n  .lit {\n    color: #044;\n  }\n  .pun,\n  .opn,\n  .clo {\n    color: #440;\n  }\n  .tag {\n    color: #006;\n    font-weight: bold;\n  }\n  .atn {\n    color: #404;\n  }\n  .atv {\n    color: #060;\n  }\n}\n.pln {\n  color: #000;\n}\n@media screen {\n  .str {\n    color: #080;\n  }\n  .kwd {\n    color: #008;\n  }\n  .com {\n    color: #800;\n  }\n  .typ {\n    color: #606;\n  }\n  .lit {\n    color: #066;\n  }\n  .pun,\n  .opn,\n  .clo {\n    color: #660;\n  }\n  .tag {\n    color: #008;\n  }\n  .atn {\n    color: #606;\n  }\n  .atv {\n    color: #080;\n  }\n  .dec,\n  .var {\n    color: #606;\n  }\n  .fun {\n    color: red;\n  }\n}\n@media print, projection {\n  .str {\n    color: #060;\n  }\n  .kwd {\n    color: #006;\n    font-weight: bold;\n  }\n  .com {\n    color: #600;\n    font-style: italic;\n  }\n  .typ {\n    color: #404;\n    font-weight: bold;\n  }\n  .lit {\n    color: #044;\n  }\n  .pun,\n  .opn,\n  .clo {\n    color: #440;\n  }\n  .tag {\n    color: #006;\n    font-weight: bold;\n  }\n  .atn {\n    color: #404;\n  }\n  .atv {\n    color: #060;\n  }\n}\npre.prettyprint {\n  border-radius: 0;\n  font-family: 'consolas', 'menlo', 'courier', 'monospace', 'Microsoft Yahei' !important;\n  overflow-y: auto;\n}\npre.prettyprint {\n  border-radius: 0;\n  font-family: 'consolas', 'menlo', 'courier', 'monospace', 'Microsoft Yahei' !important;\n  overflow-y: auto;\n}\npre.prettyprint.linenums {\n  border: 1px solid #e2e2e2 !important;\n  padding: 8px 0 6px;\n}\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  list-style-type: none !important;\n}\nol.linenums li > span {\n  word-break: inherit !important;\n  white-space: nowrap !important;\n  display: block;\n}\nol.linenums li > span > span {\n  word-break: inherit !important;\n  white-space: nowrap !important;\n  display: block;\n}\nol.linenums li code {\n  line-height: 20px !important;\n  margin-left: -20px;\n  font-family: inherit !important;\n  white-space: pre !important;\n  display: flex;\n}\nol.linenums li code span {\n  white-space: inherit !important;\n  font-size: 13px !important;\n  line-height: 20px;\n  font-family: 'consolas', 'menlo', 'courier', 'monospace', 'Microsoft Yahei' !important;\n}\n.code-in-text {\n  color: #585858;\n  background: #f3f1f1;\n}\n.code-in-text span {\n  color: #585858;\n  background: #f3f1f1;\n  display: inline-block;\n  padding: 0 2px;\n  font-size: 14px;\n  font-family: 'consolas', 'menlo', 'courier', 'monospace', 'Microsoft Yahei' !important;\n}\n.prettyprint.code-in-text {\n  background: #f3f1f1;\n  font-family: 'consolas', 'menlo', 'courier', 'monospace', 'Microsoft Yahei' !important;\n}\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  list-style-type: none !important;\n}\nli.L1,\nli.L3,\nli.L5,\nli.L7,\nli.L9 {\n  list-style-type: none !important;\n  background: transparent !important;\n}\nh3#headline {\n  color: #444;\n  margin: 0;\n  padding: 11px 0px 5px 0px;\n  font-size: 11px;\n  line-height: 14px;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  font-weight: bold;\n}\nh2#headline {\n  color: #444;\n  margin: 0;\n  padding: 0px 0px 6px 0px;\n  font-size: 51px;\n  line-height: 44px;\n  letter-spacing: -2px;\n  font-weight: bold;\n  text-transform: none;\n}\n::selection {\n  background: #fde6ba;\n  color: #000;\n}\nh1 {\n  font-size: 26px;\n}\nh2 {\n  font-size: 22px;\n}\nh3 {\n  font-size: 18px;\n}\nh4 {\n  font-size: 14px;\n}\na {\n  font-size: 14px !important;\n  word-break: break-all !important;\n}\nul,\nol {\n  padding-left: 32px !important;\n  list-style-type: square !important;\n}\nul li span,\nol li span {\n  font-size: 14px !important;\n  color: #4a4a4a;\n}\n.topheader {\n  overflow: hidden;\n  -webkit-user-select: none;\n  height: 68px;\n  padding: 0 20px;\n  position: relative;\n  background: #499bea;\n  background: -moz-linear-gradient(left, #e5e5be 0, #003973 100%);\n  background: -webkit-gradient(linear, left, right, color-sleft(0%, #e5e5be), color-sleft(100%, #003973));\n  background: -webkit-linear-gradient(left, #e5e5be 0, #003973 100%);\n  background: -o-linear-gradient(left, #e5e5be 0, #003973 100%);\n  background: -ms-linear-gradient(left, #e5e5be 0, #003973 100%);\n  background: linear-gradient(to left, #e5e5be 0, #003973 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#e5e5be', endColorstr='#003973', GradientType=1);\n}\n.topheader h1 {\n  color: #FFF;\n  margin-bottom: 0;\n  line-height: 50px;\n}\n.topheader span {\n  font-size: 13px;\n  display: inline-block;\n  margin-left: 0;\n  color: #E4E4E4;\n  position: relative;\n  top: 10px;\n}\n.topheader span a {\n  color: #E4E4E4;\n}\n.topheader a:hover {\n  color: #e58c7c;\n}\n.topheader ul {\n  position: absolute;\n  right: 20px;\n  top: 0;\n  list-style-type: none !important;\n  height: 64px;\n  line-height: 64px;\n}\n.topheader ul li {\n  float: left;\n  margin-left: 20px;\n  font-family: consolas;\n}\n.topheader ul li a {\n  color: #555;\n  display: inline-block;\n  height: 100%;\n  line-height: 64px;\n}\n.topheader ul li a {\n  color: #555;\n}\n.topheader ul li a:hover {\n  color: #000;\n  text-decoration: underline;\n}\n.topheader ul li .icon {\n  margin-right: 4px;\n  vertical-align: middle;\n  transition: none;\n}\ntextarea {\n  width: 100%;\n  margin: 0;\n  padding: 1em;\n  overflow: auto;\n  border: none;\n  background-color: #fff;\n  font-family: courier, monospace;\n  font-size: inherit;\n  color: inherit;\n  outline: none;\n  background: #333;\n  color: #fff;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  resize: none;\n  z-index: 2;\n  font-size: 15px;\n}\n#output {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  resize: none;\n  z-index: 1;\n  background: #EEE;\n  overflow: hidden;\n}\n#output .wrapper {\n  overflow-y: auto;\n  height: 100%;\n  margin: 0 auto;\n  background: #FFF;\n  padding: 1rem;\n  width: 800px;\n  padding-bottom: 100px;\n  max-width: 100%;\n  -webkit-overflow-scrolling: touch;\n}\n.github-star {\n  position: relative;\n  top: 5px;\n}\n.bar-wrap {\n  text-align: center;\n  padding-bottom: 10px;\n  margin-bottom: 10px;\n}\n.btn {\n  border: none;\n  color: white;\n  padding: 5px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  box-shadow: 1px 1px 3px #666;\n  z-index: 200;\n  position: absolute;\n  top: 10px;\n}\n.convert-button,\n.copy-button {\n  position: absolute;\n  right: 110px;\n  border-radius: 3px;\n  background-color: #3a6586;\n}\n.convert-button {\n  right: 15px;\n  background-color: #e3e4bd;\n  color: #555;\n}\n.themes-config {\n  margin: 0 auto;\n  width: 800px;\n  max-width: 100%;\n}\n.themes-config .theme-wrapper {\n  margin-top: 20px;\n  display: inline-block;\n  margin-right: 20px;\n}\n.themes-config .theme-wrapper select {\n  background: #FFF;\n}\n@media screen and (max-width: 641px) {\n  .topheader ul {\n    display: none;\n  }\n  .btn {\n    padding: 2px 15px;\n    font-size: 14px;\n  }\n  .copy-button {\n    right: 80px;\n  }\n  .bar-wrap {\n    display: none;\n  }\n}\nhtml,\nbody,\n.page-con {\n  height: 100%;\n}\n.topheader {\n  width: 100%;\n  height: 50px;\n  line-height: 50px;\n  text-align: center;\n}\n#input {\n  width: 100%;\n  position: absolute;\n  left: 0px;\n  z-index: 100;\n}\n#output {\n  width: 100%;\n  position: absolute;\n  left: 0;\n  z-index: 50;\n}\n.page-con {\n  position: relative;\n}\n",""])},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,'/*! Color themes for Google Code Prettify | MIT License | github.com/jmblog/color-themes-for-google-code-prettify */\n.prettyprint {\n  background: #1d1f21;\n  font-family: Menlo, "Bitstream Vera Sans Mono", "DejaVu Sans Mono", Monaco, Consolas, monospace;\n  border: 0 !important;\n}\n\n.pln {\n  color: #c5c8c6;\n}\n\n/* Specify class=linenums on a pre to get line numbering */\nol.linenums {\n  margin-top: 0;\n  margin-bottom: 0;\n  color: #969896;\n}\n\nli.L0,\nli.L1,\nli.L2,\nli.L3,\nli.L4,\nli.L5,\nli.L6,\nli.L7,\nli.L8,\nli.L9 {\n  padding-left: 1em;\n  background-color: #1d1f21;\n  list-style-type: decimal;\n}\n\n@media screen {\n\n  /* string content */\n\n  .str {\n    color: #b5bd68;\n  }\n\n  /* keyword */\n\n  .kwd {\n    color: #b294bb;\n  }\n\n  /* comment */\n\n  .com {\n    color: #969896;\n  }\n\n  /* type name */\n\n  .typ {\n    color: #81a2be;\n  }\n\n  /* literal value */\n\n  .lit {\n    color: #de935f;\n  }\n\n  /* punctuation */\n\n  .pun {\n    color: #c5c8c6;\n  }\n\n  /* lisp open bracket */\n\n  .opn {\n    color: #c5c8c6;\n  }\n\n  /* lisp close bracket */\n\n  .clo {\n    color: #c5c8c6;\n  }\n\n  /* markup tag name */\n\n  .tag {\n    color: #cc6666;\n  }\n\n  /* markup attribute name */\n\n  .atn {\n    color: #de935f;\n  }\n\n  /* markup attribute value */\n\n  .atv {\n    color: #8abeb7;\n  }\n\n  /* declaration */\n\n  .dec {\n    color: #de935f;\n  }\n\n  /* variable name */\n\n  .var {\n    color: #cc6666;\n  }\n\n  /* function name */\n\n  .fun {\n    color: #81a2be;\n  }\n}\n',""])},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,c=0,u=[],p=n(8);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertAt.before,n);n.insertBefore(t,o)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=m(t)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&f(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var b,x=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r;e.exports=function e(t,n,o){function i(s,l){if(!n[s]){if(!t[s]){var c="function"==typeof r&&r;if(!l&&c)return r(s,!0);if(a)return a(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[s]={exports:{}};t[s][0].call(p.exports,function(e){var n=t[s][1][e];return i(n||e)},p,p.exports,e,t,n,o)}return n[s].exports}for(var a="function"==typeof r&&r,s=0;s<o.length;s++)i(o[s]);return i}({1:[function(e,t,n){if(Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}t.exports=function(e,t){for(;e&&e!==document;){if(e.matches(t))return e;e=e.parentNode}}},{}],2:[function(e,t,n){function r(e,t,n,r){return function(n){n.delegateTarget=o(n.target,t),n.delegateTarget&&r.call(e,n)}}var o=e("./closest");t.exports=function(e,t,n,o,i){var a=r.apply(this,arguments);return e.addEventListener(n,a,i),{destroy:function(){e.removeEventListener(n,a,i)}}}},{"./closest":1}],3:[function(e,t,n){n.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},n.nodeList=function(e){var t=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===t||"[object HTMLCollection]"===t)&&"length"in e&&(0===e.length||n.node(e[0]))},n.string=function(e){return"string"==typeof e||e instanceof String},n.fn=function(e){var t=Object.prototype.toString.call(e);return"[object Function]"===t}},{}],4:[function(e,t,n){var r=e("./is"),o=e("delegate");t.exports=function(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!r.string(t))throw new TypeError("Second argument must be a String");if(!r.fn(n))throw new TypeError("Third argument must be a Function");if(r.node(e))return function(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}(e,t,n);if(r.nodeList(e))return function(e,t,n){return Array.prototype.forEach.call(e,function(e){e.addEventListener(t,n)}),{destroy:function(){Array.prototype.forEach.call(e,function(e){e.removeEventListener(t,n)})}}}(e,t,n);if(r.string(e))return function(e,t,n){return o(document.body,e,t,n)}(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},{"./is":3,delegate:2}],5:[function(e,t,n){t.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName)e.focus(),e.setSelectionRange(0,e.value.length),t=e.value;else{e.hasAttribute("contenteditable")&&e.focus();var n=window.getSelection(),r=document.createRange();r.selectNodeContents(e),n.removeAllRanges(),n.addRange(r),t=n.toString()}return t}},{}],6:[function(e,t,n){function r(){}r.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){function r(){o.off(e,r),t.apply(n,arguments)}var o=this;return r._=t,this.on(e,r,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,o=n.length;r<o;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],o=[];if(r&&t)for(var i=0,a=r.length;i<a;i++)r[i].fn!==t&&r[i].fn._!==t&&o.push(r[i]);return o.length?n[e]=o:delete n[e],this}},t.exports=r},{}],7:[function(e,t,n){!function(r,o){if(void 0!==n)o(t,e("select"));else{var i={exports:{}};o(i,r.select),r.clipboardAction=i.exports}}(this,function(e,t){"use strict";var n=function(e){return e&&e.__esModule?e:{default:e}}(t),r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(){function e(t){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this.resolveOptions(t),this.initSelection()}return o(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var r=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.addEventListener("focus",window.scrollTo(0,r)),this.fakeElem.style.top=r+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,n.default)(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,n.default)(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":r(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}();e.exports=i})},{select:5}],8:[function(e,t,n){!function(r,o){if(void 0!==n)o(t,e("./clipboard-action"),e("tiny-emitter"),e("good-listener"));else{var i={exports:{}};o(i,r.clipboardAction,r.tinyEmitter,r.goodListener),r.clipboard=i.exports}}(this,function(e,t,n,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}var a=o(t),s=o(n),l=o(r),c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.resolveOptions(n),r.listenClick(e),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),c(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText}},{key:"listenClick",value:function(e){var t=this;this.listener=(0,l.default)(e,"click",function(e){return t.onClick(e)})}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new a.default({action:this.action(t),target:this.target(t),text:this.text(t),trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return i("action",e)}},{key:"defaultTarget",value:function(e){var t=i("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return i("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}]),t}(s.default);e.exports=u})},{"./clipboard-action":7,"good-listener":4,"tiny-emitter":6}]},{},[8])(8)},function(e,t,n){var r=n(1),o=["atelier-cave-dark","atelier-cave-light","atelier-dune-dark","atelier-dune-light","atelier-estuary-dark","atelier-estuary-light","atelier-forest-dark","atelier-forest-light","atelier-heath-dark","atelier-heath-light","atelier-lakeside-dark","atelier-lakeside-light","atelier-plateau-dark","atelier-plateau-light","atelier-savanna-dark","atelier-savanna-light","atelier-seaside-dark","atelier-seaside-light","atelier-sulphurpool-dark","atelier-sulphurpool-light","github-light","github-v2","github","hemisu-dark","hemisu-light","tomorrow-night-blue","tomorrow-night-bright","tomorrow-night-eighties","tomorrow-night","tomorrow","tranquil-heart","vibrant-ink"];let i=function(){this.init()};i.prototype.init=function(){this.bindEvt()},i.prototype.bindEvt=function(){var e=r.map(o,function(e){return'<option value="'+e+'"'+("atelier-forest-light"===e?" selected":"")+">"+e+"</option>"});r(".code-theme").html(e),r(".code-theme").on("change",function(){var e=r(this).val();r("#codeThemeId").attr("href","./themes/"+e+".css")}).trigger("change")},e.exports=i},function(e,t,n){var r=n(1),o=["段落缩进","默认样式-适合代码","字号偏大-间距偏大-窄屏模式","字号偏大-间距偏大-宽屏模式"];let i=function(){this.init()};i.prototype.init=function(){this.bindEvt()},i.prototype.bindEvt=function(){var e=r.map(o,function(e){return'<option value="'+e+'"'+("默认样式-适合代码"===e?" selected":"")+">"+e+"</option>"});r(".page-theme").html(e),r(".page-theme").on("change",function(){var e=r(this).val();r("#pageThemeId").attr("href","./pageThemes/"+e+".css")}).trigger("change")},e.exports=i},function(e,t,n){n(0).extension("prettify",function(){return[{type:"output",filter:function(e){return e.replace(/(<pre[^>]*>)?[\n\s]?<code([^>]*)>/gi,function(e,t,n){return t?'<pre class="prettyprint linenums" style="font-size: 10px;line-height: 12px"><code'+n+' style="font-size: 10px;line-height: 12px">':' <code class="prettyprint code-in-text"  style="font-size: 16px;line-height: 18px">'})}}]})},function(e,t,n){n(0).extension("tasklist",function(){return[{type:"output",filter:function(e){return e=(e=e.replace(/<li>\[ \] (.*)<\/li>/gi,function(e,t){if(t)return'<p class="task-list-list uncheck" style="list-style-type: none;"><i class="icon_uncheck"></i><span>'+t+"</span></p>"})).replace(/<li>\[x] (.*)<\/li>/gi,function(e,t){if(t)return'<p class="task-list-list checked" style="list-style-type: none;"><i class="icon_check"></i>'+t+"</p>"})}}]})},function(e,t,n){var r=n(0),o=new r.Converter;r.extension("footnote",function(){return[{type:"lang",filter:function(e){return e.replace(/^\[\^([\d\w]+)\]:\s*((\n+(\s{2,4}|\t).+)+)$/gm,function(e,t,n,r,i){return'<div class="footnote" id="footnote-'+t+'"><a href="#footnote-'+t+'"><sup>['+t+"]</sup></a>:"+o.makeHtml(n.replace(new RegExp("^"+i,"gm"),""))+"</div>"})}},{type:"lang",filter:function(e){return e.replace(/^\[\^([\d\w]+)\]:( |\n)((.+\n)*.+)$/gm,function(e,t,n,r){return'<small class="footnote" id="footnote-'+t+'"><a href="#footnote-'+t+'"><sup>['+t+"]</sup></a>: "+r+"</small>"})}},{type:"lang",filter:function(e){return e.replace(/\[\^([\d\w]+)\]/m,function(e,t){return'<a href="#footnote-'+t+'"><sup>['+t+"]</sup></a>"})}}]})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,